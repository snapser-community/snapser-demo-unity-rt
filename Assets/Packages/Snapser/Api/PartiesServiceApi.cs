/*
 * cjdevents
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: cjdevents: v3 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Snapser.Client;
using Snapser.Model;

namespace Snapser.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPartiesServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept Party Invite
        /// </summary>
        /// <remarks>
        /// Accepts a party invite
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">ID of the invite</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesAcceptInviteResponse</returns>
        PartiesAcceptInviteResponse AcceptInvite(string inviteId, string token, AcceptInviteRequest body);

        /// <summary>
        /// Accept Party Invite
        /// </summary>
        /// <remarks>
        /// Accepts a party invite
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">ID of the invite</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesAcceptInviteResponse</returns>
        ApiResponse<PartiesAcceptInviteResponse> AcceptInviteWithHttpInfo(string inviteId, string token, AcceptInviteRequest body);
        /// <summary>
        /// Approve Party Request
        /// </summary>
        /// <remarks>
        /// Approves a party request. Only the party owner can approve requests.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesApprovePartyRequestResponse</returns>
        PartiesApprovePartyRequestResponse ApprovePartyRequest(string requestId, string token, AcceptInviteRequest body);

        /// <summary>
        /// Approve Party Request
        /// </summary>
        /// <remarks>
        /// Approves a party request. Only the party owner can approve requests.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesApprovePartyRequestResponse</returns>
        ApiResponse<PartiesApprovePartyRequestResponse> ApprovePartyRequestWithHttpInfo(string requestId, string token, AcceptInviteRequest body);
        /// <summary>
        /// Ban User
        /// </summary>
        /// <remarks>
        /// Bans a user from a party. Only the party owner can ban users.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesBanUserResponse</returns>
        PartiesBanUserResponse BanUser(string partyId, string token, BanUserRequest body);

        /// <summary>
        /// Ban User
        /// </summary>
        /// <remarks>
        /// Bans a user from a party. Only the party owner can ban users.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesBanUserResponse</returns>
        ApiResponse<PartiesBanUserResponse> BanUserWithHttpInfo(string partyId, string token, BanUserRequest body);
        /// <summary>
        /// Create Party
        /// </summary>
        /// <remarks>
        /// Creates a party.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesCreatePartyResponse</returns>
        PartiesCreatePartyResponse CreateParty(string token, PartiesCreatePartyRequest body);

        /// <summary>
        /// Create Party
        /// </summary>
        /// <remarks>
        /// Creates a party.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesCreatePartyResponse</returns>
        ApiResponse<PartiesCreatePartyResponse> CreatePartyWithHttpInfo(string token, PartiesCreatePartyRequest body);
        /// <summary>
        /// Edit Party APIs
        /// </summary>
        /// <remarks>
        /// Deletes a party. Only the party owner can delete the party.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="ownerId">ID of the owner of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <returns>PartiesDeletePartyResponse</returns>
        PartiesDeletePartyResponse DeleteParty(string partyId, string token, string ownerId = default(string));

        /// <summary>
        /// Edit Party APIs
        /// </summary>
        /// <remarks>
        /// Deletes a party. Only the party owner can delete the party.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="ownerId">ID of the owner of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <returns>ApiResponse of PartiesDeletePartyResponse</returns>
        ApiResponse<PartiesDeletePartyResponse> DeletePartyWithHttpInfo(string partyId, string token, string ownerId = default(string));
        /// <summary>
        /// Edit Party APIs
        /// </summary>
        /// <remarks>
        /// Creates a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId"></param>
        /// <param name="token">User session token</param>
        /// <returns>PartiesGetPartyResponse</returns>
        PartiesGetPartyResponse GetParty(string partyId, string token);

        /// <summary>
        /// Edit Party APIs
        /// </summary>
        /// <remarks>
        /// Creates a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId"></param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of PartiesGetPartyResponse</returns>
        ApiResponse<PartiesGetPartyResponse> GetPartyWithHttpInfo(string partyId, string token);
        /// <summary>
        /// Party Invite APIs
        /// </summary>
        /// <remarks>
        /// Invites a user to a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesInviteUserResponse</returns>
        PartiesInviteUserResponse InviteUser(string partyId, string token, InviteUserRequest body);

        /// <summary>
        /// Party Invite APIs
        /// </summary>
        /// <remarks>
        /// Invites a user to a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesInviteUserResponse</returns>
        ApiResponse<PartiesInviteUserResponse> InviteUserWithHttpInfo(string partyId, string token, InviteUserRequest body);
        /// <summary>
        /// Join Party
        /// </summary>
        /// <remarks>
        /// Joins a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesJoinPartyResponse</returns>
        PartiesJoinPartyResponse JoinParty(string partyId, string token, JoinPartyRequest body);

        /// <summary>
        /// Join Party
        /// </summary>
        /// <remarks>
        /// Joins a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesJoinPartyResponse</returns>
        ApiResponse<PartiesJoinPartyResponse> JoinPartyWithHttpInfo(string partyId, string token, JoinPartyRequest body);
        /// <summary>
        /// Kick User
        /// </summary>
        /// <remarks>
        /// Kicks a user from a party. Only the party owner can kick users
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesKickUserResponse</returns>
        PartiesKickUserResponse KickUser(string partyId, string token, KickUserRequest body);

        /// <summary>
        /// Kick User
        /// </summary>
        /// <remarks>
        /// Kicks a user from a party. Only the party owner can kick users
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesKickUserResponse</returns>
        ApiResponse<PartiesKickUserResponse> KickUserWithHttpInfo(string partyId, string token, KickUserRequest body);
        /// <summary>
        /// Leave Party
        /// </summary>
        /// <remarks>
        /// Leaves a party. If the party owner leaves, the party ownership is transferred to another party member.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesLeavePartyResponse</returns>
        PartiesLeavePartyResponse LeaveParty(string partyId, string token, LeavePartyRequest body);

        /// <summary>
        /// Leave Party
        /// </summary>
        /// <remarks>
        /// Leaves a party. If the party owner leaves, the party ownership is transferred to another party member.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesLeavePartyResponse</returns>
        ApiResponse<PartiesLeavePartyResponse> LeavePartyWithHttpInfo(string partyId, string token, LeavePartyRequest body);
        /// <summary>
        /// Party Invite APIs
        /// </summary>
        /// <remarks>
        /// Lists party invites
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list invites of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <returns>PartiesListPartyInvitesResponse</returns>
        PartiesListPartyInvitesResponse ListPartyInvites(string partyId, string token, string userId = default(string));

        /// <summary>
        /// Party Invite APIs
        /// </summary>
        /// <remarks>
        /// Lists party invites
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list invites of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <returns>ApiResponse of PartiesListPartyInvitesResponse</returns>
        ApiResponse<PartiesListPartyInvitesResponse> ListPartyInvitesWithHttpInfo(string partyId, string token, string userId = default(string));
        /// <summary>
        /// Party Request APIs
        /// </summary>
        /// <remarks>
        /// Lists party requests
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list requests of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <returns>PartiesListPartyRequestsResponse</returns>
        PartiesListPartyRequestsResponse ListPartyRequests(string partyId, string token, string userId = default(string));

        /// <summary>
        /// Party Request APIs
        /// </summary>
        /// <remarks>
        /// Lists party requests
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list requests of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <returns>ApiResponse of PartiesListPartyRequestsResponse</returns>
        ApiResponse<PartiesListPartyRequestsResponse> ListPartyRequestsWithHttpInfo(string partyId, string token, string userId = default(string));
        /// <summary>
        /// Party Request APIs
        /// </summary>
        /// <remarks>
        /// Requests to join a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesRequestToJoinPartyResponse</returns>
        PartiesRequestToJoinPartyResponse RequestToJoinParty(string partyId, string token, JoinPartyRequest body);

        /// <summary>
        /// Party Request APIs
        /// </summary>
        /// <remarks>
        /// Requests to join a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesRequestToJoinPartyResponse</returns>
        ApiResponse<PartiesRequestToJoinPartyResponse> RequestToJoinPartyWithHttpInfo(string partyId, string token, JoinPartyRequest body);
        /// <summary>
        /// Search Parties
        /// </summary>
        /// <remarks>
        /// Searches for parties
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesSearchPartiesResponse</returns>
        PartiesSearchPartiesResponse SearchParties(string token, PartiesSearchPartiesRequest body);

        /// <summary>
        /// Search Parties
        /// </summary>
        /// <remarks>
        /// Searches for parties
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesSearchPartiesResponse</returns>
        ApiResponse<PartiesSearchPartiesResponse> SearchPartiesWithHttpInfo(string token, PartiesSearchPartiesRequest body);
        /// <summary>
        /// Unban User
        /// </summary>
        /// <remarks>
        /// Unbans a user from a party. Only the party owner can unban users
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesUnbanUserResponse</returns>
        PartiesUnbanUserResponse UnbanUser(string partyId, string token, UnbanUserRequest body);

        /// <summary>
        /// Unban User
        /// </summary>
        /// <remarks>
        /// Unbans a user from a party. Only the party owner can unban users
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesUnbanUserResponse</returns>
        ApiResponse<PartiesUnbanUserResponse> UnbanUserWithHttpInfo(string partyId, string token, UnbanUserRequest body);
        /// <summary>
        /// Edit Party APIs
        /// </summary>
        /// <remarks>
        /// Updates a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesUpdatePartyResponse</returns>
        PartiesUpdatePartyResponse UpdateParty(string partyId, string token, UpdatePartyRequest body);

        /// <summary>
        /// Edit Party APIs
        /// </summary>
        /// <remarks>
        /// Updates a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesUpdatePartyResponse</returns>
        ApiResponse<PartiesUpdatePartyResponse> UpdatePartyWithHttpInfo(string partyId, string token, UpdatePartyRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPartiesServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accept Party Invite
        /// </summary>
        /// <remarks>
        /// Accepts a party invite
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">ID of the invite</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesAcceptInviteResponse</returns>
        System.Threading.Tasks.Task<PartiesAcceptInviteResponse> AcceptInviteAsync(string inviteId, string token, AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept Party Invite
        /// </summary>
        /// <remarks>
        /// Accepts a party invite
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">ID of the invite</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesAcceptInviteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesAcceptInviteResponse>> AcceptInviteWithHttpInfoAsync(string inviteId, string token, AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Approve Party Request
        /// </summary>
        /// <remarks>
        /// Approves a party request. Only the party owner can approve requests.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesApprovePartyRequestResponse</returns>
        System.Threading.Tasks.Task<PartiesApprovePartyRequestResponse> ApprovePartyRequestAsync(string requestId, string token, AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Approve Party Request
        /// </summary>
        /// <remarks>
        /// Approves a party request. Only the party owner can approve requests.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesApprovePartyRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesApprovePartyRequestResponse>> ApprovePartyRequestWithHttpInfoAsync(string requestId, string token, AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ban User
        /// </summary>
        /// <remarks>
        /// Bans a user from a party. Only the party owner can ban users.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesBanUserResponse</returns>
        System.Threading.Tasks.Task<PartiesBanUserResponse> BanUserAsync(string partyId, string token, BanUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ban User
        /// </summary>
        /// <remarks>
        /// Bans a user from a party. Only the party owner can ban users.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesBanUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesBanUserResponse>> BanUserWithHttpInfoAsync(string partyId, string token, BanUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Party
        /// </summary>
        /// <remarks>
        /// Creates a party.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesCreatePartyResponse</returns>
        System.Threading.Tasks.Task<PartiesCreatePartyResponse> CreatePartyAsync(string token, PartiesCreatePartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Party
        /// </summary>
        /// <remarks>
        /// Creates a party.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesCreatePartyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesCreatePartyResponse>> CreatePartyWithHttpInfoAsync(string token, PartiesCreatePartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit Party APIs
        /// </summary>
        /// <remarks>
        /// Deletes a party. Only the party owner can delete the party.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="ownerId">ID of the owner of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesDeletePartyResponse</returns>
        System.Threading.Tasks.Task<PartiesDeletePartyResponse> DeletePartyAsync(string partyId, string token, string ownerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit Party APIs
        /// </summary>
        /// <remarks>
        /// Deletes a party. Only the party owner can delete the party.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="ownerId">ID of the owner of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesDeletePartyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesDeletePartyResponse>> DeletePartyWithHttpInfoAsync(string partyId, string token, string ownerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit Party APIs
        /// </summary>
        /// <remarks>
        /// Creates a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId"></param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesGetPartyResponse</returns>
        System.Threading.Tasks.Task<PartiesGetPartyResponse> GetPartyAsync(string partyId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit Party APIs
        /// </summary>
        /// <remarks>
        /// Creates a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId"></param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesGetPartyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesGetPartyResponse>> GetPartyWithHttpInfoAsync(string partyId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Party Invite APIs
        /// </summary>
        /// <remarks>
        /// Invites a user to a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesInviteUserResponse</returns>
        System.Threading.Tasks.Task<PartiesInviteUserResponse> InviteUserAsync(string partyId, string token, InviteUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Party Invite APIs
        /// </summary>
        /// <remarks>
        /// Invites a user to a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesInviteUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesInviteUserResponse>> InviteUserWithHttpInfoAsync(string partyId, string token, InviteUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Join Party
        /// </summary>
        /// <remarks>
        /// Joins a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesJoinPartyResponse</returns>
        System.Threading.Tasks.Task<PartiesJoinPartyResponse> JoinPartyAsync(string partyId, string token, JoinPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Join Party
        /// </summary>
        /// <remarks>
        /// Joins a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesJoinPartyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesJoinPartyResponse>> JoinPartyWithHttpInfoAsync(string partyId, string token, JoinPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Kick User
        /// </summary>
        /// <remarks>
        /// Kicks a user from a party. Only the party owner can kick users
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesKickUserResponse</returns>
        System.Threading.Tasks.Task<PartiesKickUserResponse> KickUserAsync(string partyId, string token, KickUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Kick User
        /// </summary>
        /// <remarks>
        /// Kicks a user from a party. Only the party owner can kick users
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesKickUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesKickUserResponse>> KickUserWithHttpInfoAsync(string partyId, string token, KickUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Leave Party
        /// </summary>
        /// <remarks>
        /// Leaves a party. If the party owner leaves, the party ownership is transferred to another party member.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesLeavePartyResponse</returns>
        System.Threading.Tasks.Task<PartiesLeavePartyResponse> LeavePartyAsync(string partyId, string token, LeavePartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Leave Party
        /// </summary>
        /// <remarks>
        /// Leaves a party. If the party owner leaves, the party ownership is transferred to another party member.
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesLeavePartyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesLeavePartyResponse>> LeavePartyWithHttpInfoAsync(string partyId, string token, LeavePartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Party Invite APIs
        /// </summary>
        /// <remarks>
        /// Lists party invites
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list invites of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesListPartyInvitesResponse</returns>
        System.Threading.Tasks.Task<PartiesListPartyInvitesResponse> ListPartyInvitesAsync(string partyId, string token, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Party Invite APIs
        /// </summary>
        /// <remarks>
        /// Lists party invites
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list invites of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesListPartyInvitesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesListPartyInvitesResponse>> ListPartyInvitesWithHttpInfoAsync(string partyId, string token, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Party Request APIs
        /// </summary>
        /// <remarks>
        /// Lists party requests
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list requests of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesListPartyRequestsResponse</returns>
        System.Threading.Tasks.Task<PartiesListPartyRequestsResponse> ListPartyRequestsAsync(string partyId, string token, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Party Request APIs
        /// </summary>
        /// <remarks>
        /// Lists party requests
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list requests of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesListPartyRequestsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesListPartyRequestsResponse>> ListPartyRequestsWithHttpInfoAsync(string partyId, string token, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Party Request APIs
        /// </summary>
        /// <remarks>
        /// Requests to join a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesRequestToJoinPartyResponse</returns>
        System.Threading.Tasks.Task<PartiesRequestToJoinPartyResponse> RequestToJoinPartyAsync(string partyId, string token, JoinPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Party Request APIs
        /// </summary>
        /// <remarks>
        /// Requests to join a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesRequestToJoinPartyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesRequestToJoinPartyResponse>> RequestToJoinPartyWithHttpInfoAsync(string partyId, string token, JoinPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Parties
        /// </summary>
        /// <remarks>
        /// Searches for parties
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesSearchPartiesResponse</returns>
        System.Threading.Tasks.Task<PartiesSearchPartiesResponse> SearchPartiesAsync(string token, PartiesSearchPartiesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Parties
        /// </summary>
        /// <remarks>
        /// Searches for parties
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesSearchPartiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesSearchPartiesResponse>> SearchPartiesWithHttpInfoAsync(string token, PartiesSearchPartiesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unban User
        /// </summary>
        /// <remarks>
        /// Unbans a user from a party. Only the party owner can unban users
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesUnbanUserResponse</returns>
        System.Threading.Tasks.Task<PartiesUnbanUserResponse> UnbanUserAsync(string partyId, string token, UnbanUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unban User
        /// </summary>
        /// <remarks>
        /// Unbans a user from a party. Only the party owner can unban users
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesUnbanUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesUnbanUserResponse>> UnbanUserWithHttpInfoAsync(string partyId, string token, UnbanUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit Party APIs
        /// </summary>
        /// <remarks>
        /// Updates a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesUpdatePartyResponse</returns>
        System.Threading.Tasks.Task<PartiesUpdatePartyResponse> UpdatePartyAsync(string partyId, string token, UpdatePartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit Party APIs
        /// </summary>
        /// <remarks>
        /// Updates a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesUpdatePartyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartiesUpdatePartyResponse>> UpdatePartyWithHttpInfoAsync(string partyId, string token, UpdatePartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPartiesServiceApi : IPartiesServiceApiSync, IPartiesServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PartiesServiceApi : IDisposable, IPartiesServiceApi
    {
        private Snapser.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public PartiesServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public PartiesServiceApi(string basePath)
        {
            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesServiceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public PartiesServiceApi(Snapser.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesServiceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PartiesServiceApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesServiceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PartiesServiceApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesServiceApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PartiesServiceApi(HttpClient client, Snapser.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public PartiesServiceApi(Snapser.Client.ISynchronousClient client, Snapser.Client.IAsynchronousClient asyncClient, Snapser.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Snapser.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Snapser.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Snapser.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Snapser.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Snapser.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accept Party Invite Accepts a party invite
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">ID of the invite</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesAcceptInviteResponse</returns>
        public PartiesAcceptInviteResponse AcceptInvite(string inviteId, string token, AcceptInviteRequest body)
        {
            Snapser.Client.ApiResponse<PartiesAcceptInviteResponse> localVarResponse = AcceptInviteWithHttpInfo(inviteId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept Party Invite Accepts a party invite
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">ID of the invite</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesAcceptInviteResponse</returns>
        public Snapser.Client.ApiResponse<PartiesAcceptInviteResponse> AcceptInviteWithHttpInfo(string inviteId, string token, AcceptInviteRequest body)
        {
            // verify the required parameter 'inviteId' is set
            if (inviteId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'inviteId' when calling PartiesServiceApi->AcceptInvite");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->AcceptInvite");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->AcceptInvite");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("invite_id", Snapser.Client.ClientUtils.ParameterToString(inviteId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PartiesAcceptInviteResponse>("/v1/parties/invites/{invite_id}/accept", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept Party Invite Accepts a party invite
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">ID of the invite</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesAcceptInviteResponse</returns>
        public async System.Threading.Tasks.Task<PartiesAcceptInviteResponse> AcceptInviteAsync(string inviteId, string token, AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesAcceptInviteResponse> localVarResponse = await AcceptInviteWithHttpInfoAsync(inviteId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept Party Invite Accepts a party invite
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">ID of the invite</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesAcceptInviteResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesAcceptInviteResponse>> AcceptInviteWithHttpInfoAsync(string inviteId, string token, AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inviteId' is set
            if (inviteId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'inviteId' when calling PartiesServiceApi->AcceptInvite");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->AcceptInvite");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->AcceptInvite");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("invite_id", Snapser.Client.ClientUtils.ParameterToString(inviteId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PartiesAcceptInviteResponse>("/v1/parties/invites/{invite_id}/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve Party Request Approves a party request. Only the party owner can approve requests.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesApprovePartyRequestResponse</returns>
        public PartiesApprovePartyRequestResponse ApprovePartyRequest(string requestId, string token, AcceptInviteRequest body)
        {
            Snapser.Client.ApiResponse<PartiesApprovePartyRequestResponse> localVarResponse = ApprovePartyRequestWithHttpInfo(requestId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approve Party Request Approves a party request. Only the party owner can approve requests.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesApprovePartyRequestResponse</returns>
        public Snapser.Client.ApiResponse<PartiesApprovePartyRequestResponse> ApprovePartyRequestWithHttpInfo(string requestId, string token, AcceptInviteRequest body)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'requestId' when calling PartiesServiceApi->ApprovePartyRequest");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->ApprovePartyRequest");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->ApprovePartyRequest");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("request_id", Snapser.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PartiesApprovePartyRequestResponse>("/v1/parties/requests/{request_id}/approve", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApprovePartyRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve Party Request Approves a party request. Only the party owner can approve requests.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesApprovePartyRequestResponse</returns>
        public async System.Threading.Tasks.Task<PartiesApprovePartyRequestResponse> ApprovePartyRequestAsync(string requestId, string token, AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesApprovePartyRequestResponse> localVarResponse = await ApprovePartyRequestWithHttpInfoAsync(requestId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approve Party Request Approves a party request. Only the party owner can approve requests.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesApprovePartyRequestResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesApprovePartyRequestResponse>> ApprovePartyRequestWithHttpInfoAsync(string requestId, string token, AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'requestId' when calling PartiesServiceApi->ApprovePartyRequest");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->ApprovePartyRequest");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->ApprovePartyRequest");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("request_id", Snapser.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PartiesApprovePartyRequestResponse>("/v1/parties/requests/{request_id}/approve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApprovePartyRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ban User Bans a user from a party. Only the party owner can ban users.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesBanUserResponse</returns>
        public PartiesBanUserResponse BanUser(string partyId, string token, BanUserRequest body)
        {
            Snapser.Client.ApiResponse<PartiesBanUserResponse> localVarResponse = BanUserWithHttpInfo(partyId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ban User Bans a user from a party. Only the party owner can ban users.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesBanUserResponse</returns>
        public Snapser.Client.ApiResponse<PartiesBanUserResponse> BanUserWithHttpInfo(string partyId, string token, BanUserRequest body)
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->BanUser");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->BanUser");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->BanUser");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PartiesBanUserResponse>("/v1/parties/{party_id}/ban", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BanUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ban User Bans a user from a party. Only the party owner can ban users.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesBanUserResponse</returns>
        public async System.Threading.Tasks.Task<PartiesBanUserResponse> BanUserAsync(string partyId, string token, BanUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesBanUserResponse> localVarResponse = await BanUserWithHttpInfoAsync(partyId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ban User Bans a user from a party. Only the party owner can ban users.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesBanUserResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesBanUserResponse>> BanUserWithHttpInfoAsync(string partyId, string token, BanUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->BanUser");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->BanUser");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->BanUser");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PartiesBanUserResponse>("/v1/parties/{party_id}/ban", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BanUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Party Creates a party.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesCreatePartyResponse</returns>
        public PartiesCreatePartyResponse CreateParty(string token, PartiesCreatePartyRequest body)
        {
            Snapser.Client.ApiResponse<PartiesCreatePartyResponse> localVarResponse = CreatePartyWithHttpInfo(token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Party Creates a party.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesCreatePartyResponse</returns>
        public Snapser.Client.ApiResponse<PartiesCreatePartyResponse> CreatePartyWithHttpInfo(string token, PartiesCreatePartyRequest body)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->CreateParty");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->CreateParty");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PartiesCreatePartyResponse>("/v1/parties", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Party Creates a party.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesCreatePartyResponse</returns>
        public async System.Threading.Tasks.Task<PartiesCreatePartyResponse> CreatePartyAsync(string token, PartiesCreatePartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesCreatePartyResponse> localVarResponse = await CreatePartyWithHttpInfoAsync(token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Party Creates a party.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesCreatePartyResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesCreatePartyResponse>> CreatePartyWithHttpInfoAsync(string token, PartiesCreatePartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->CreateParty");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->CreateParty");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PartiesCreatePartyResponse>("/v1/parties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit Party APIs Deletes a party. Only the party owner can delete the party.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="ownerId">ID of the owner of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <returns>PartiesDeletePartyResponse</returns>
        public PartiesDeletePartyResponse DeleteParty(string partyId, string token, string ownerId = default(string))
        {
            Snapser.Client.ApiResponse<PartiesDeletePartyResponse> localVarResponse = DeletePartyWithHttpInfo(partyId, token, ownerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Party APIs Deletes a party. Only the party owner can delete the party.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="ownerId">ID of the owner of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <returns>ApiResponse of PartiesDeletePartyResponse</returns>
        public Snapser.Client.ApiResponse<PartiesDeletePartyResponse> DeletePartyWithHttpInfo(string partyId, string token, string ownerId = default(string))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->DeleteParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->DeleteParty");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            if (ownerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "owner_id", ownerId));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<PartiesDeletePartyResponse>("/v1/parties/{party_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit Party APIs Deletes a party. Only the party owner can delete the party.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="ownerId">ID of the owner of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesDeletePartyResponse</returns>
        public async System.Threading.Tasks.Task<PartiesDeletePartyResponse> DeletePartyAsync(string partyId, string token, string ownerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesDeletePartyResponse> localVarResponse = await DeletePartyWithHttpInfoAsync(partyId, token, ownerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Party APIs Deletes a party. Only the party owner can delete the party.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="ownerId">ID of the owner of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesDeletePartyResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesDeletePartyResponse>> DeletePartyWithHttpInfoAsync(string partyId, string token, string ownerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->DeleteParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->DeleteParty");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            if (ownerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "owner_id", ownerId));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<PartiesDeletePartyResponse>("/v1/parties/{party_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit Party APIs Creates a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId"></param>
        /// <param name="token">User session token</param>
        /// <returns>PartiesGetPartyResponse</returns>
        public PartiesGetPartyResponse GetParty(string partyId, string token)
        {
            Snapser.Client.ApiResponse<PartiesGetPartyResponse> localVarResponse = GetPartyWithHttpInfo(partyId, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Party APIs Creates a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId"></param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of PartiesGetPartyResponse</returns>
        public Snapser.Client.ApiResponse<PartiesGetPartyResponse> GetPartyWithHttpInfo(string partyId, string token)
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->GetParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->GetParty");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PartiesGetPartyResponse>("/v1/parties/{party_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit Party APIs Creates a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId"></param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesGetPartyResponse</returns>
        public async System.Threading.Tasks.Task<PartiesGetPartyResponse> GetPartyAsync(string partyId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesGetPartyResponse> localVarResponse = await GetPartyWithHttpInfoAsync(partyId, token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Party APIs Creates a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId"></param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesGetPartyResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesGetPartyResponse>> GetPartyWithHttpInfoAsync(string partyId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->GetParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->GetParty");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PartiesGetPartyResponse>("/v1/parties/{party_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Party Invite APIs Invites a user to a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesInviteUserResponse</returns>
        public PartiesInviteUserResponse InviteUser(string partyId, string token, InviteUserRequest body)
        {
            Snapser.Client.ApiResponse<PartiesInviteUserResponse> localVarResponse = InviteUserWithHttpInfo(partyId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Party Invite APIs Invites a user to a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesInviteUserResponse</returns>
        public Snapser.Client.ApiResponse<PartiesInviteUserResponse> InviteUserWithHttpInfo(string partyId, string token, InviteUserRequest body)
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->InviteUser");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->InviteUser");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->InviteUser");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PartiesInviteUserResponse>("/v1/parties/{party_id}/invites", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Party Invite APIs Invites a user to a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesInviteUserResponse</returns>
        public async System.Threading.Tasks.Task<PartiesInviteUserResponse> InviteUserAsync(string partyId, string token, InviteUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesInviteUserResponse> localVarResponse = await InviteUserWithHttpInfoAsync(partyId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Party Invite APIs Invites a user to a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesInviteUserResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesInviteUserResponse>> InviteUserWithHttpInfoAsync(string partyId, string token, InviteUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->InviteUser");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->InviteUser");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->InviteUser");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PartiesInviteUserResponse>("/v1/parties/{party_id}/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Join Party Joins a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesJoinPartyResponse</returns>
        public PartiesJoinPartyResponse JoinParty(string partyId, string token, JoinPartyRequest body)
        {
            Snapser.Client.ApiResponse<PartiesJoinPartyResponse> localVarResponse = JoinPartyWithHttpInfo(partyId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Join Party Joins a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesJoinPartyResponse</returns>
        public Snapser.Client.ApiResponse<PartiesJoinPartyResponse> JoinPartyWithHttpInfo(string partyId, string token, JoinPartyRequest body)
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->JoinParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->JoinParty");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->JoinParty");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PartiesJoinPartyResponse>("/v1/parties/{party_id}/join", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JoinParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Join Party Joins a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesJoinPartyResponse</returns>
        public async System.Threading.Tasks.Task<PartiesJoinPartyResponse> JoinPartyAsync(string partyId, string token, JoinPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesJoinPartyResponse> localVarResponse = await JoinPartyWithHttpInfoAsync(partyId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Join Party Joins a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesJoinPartyResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesJoinPartyResponse>> JoinPartyWithHttpInfoAsync(string partyId, string token, JoinPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->JoinParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->JoinParty");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->JoinParty");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PartiesJoinPartyResponse>("/v1/parties/{party_id}/join", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JoinParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Kick User Kicks a user from a party. Only the party owner can kick users
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesKickUserResponse</returns>
        public PartiesKickUserResponse KickUser(string partyId, string token, KickUserRequest body)
        {
            Snapser.Client.ApiResponse<PartiesKickUserResponse> localVarResponse = KickUserWithHttpInfo(partyId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Kick User Kicks a user from a party. Only the party owner can kick users
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesKickUserResponse</returns>
        public Snapser.Client.ApiResponse<PartiesKickUserResponse> KickUserWithHttpInfo(string partyId, string token, KickUserRequest body)
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->KickUser");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->KickUser");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->KickUser");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PartiesKickUserResponse>("/v1/parties/{party_id}/kick", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KickUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Kick User Kicks a user from a party. Only the party owner can kick users
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesKickUserResponse</returns>
        public async System.Threading.Tasks.Task<PartiesKickUserResponse> KickUserAsync(string partyId, string token, KickUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesKickUserResponse> localVarResponse = await KickUserWithHttpInfoAsync(partyId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Kick User Kicks a user from a party. Only the party owner can kick users
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesKickUserResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesKickUserResponse>> KickUserWithHttpInfoAsync(string partyId, string token, KickUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->KickUser");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->KickUser");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->KickUser");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PartiesKickUserResponse>("/v1/parties/{party_id}/kick", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KickUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Leave Party Leaves a party. If the party owner leaves, the party ownership is transferred to another party member.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesLeavePartyResponse</returns>
        public PartiesLeavePartyResponse LeaveParty(string partyId, string token, LeavePartyRequest body)
        {
            Snapser.Client.ApiResponse<PartiesLeavePartyResponse> localVarResponse = LeavePartyWithHttpInfo(partyId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Leave Party Leaves a party. If the party owner leaves, the party ownership is transferred to another party member.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesLeavePartyResponse</returns>
        public Snapser.Client.ApiResponse<PartiesLeavePartyResponse> LeavePartyWithHttpInfo(string partyId, string token, LeavePartyRequest body)
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->LeaveParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->LeaveParty");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->LeaveParty");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PartiesLeavePartyResponse>("/v1/parties/{party_id}/leave", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaveParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Leave Party Leaves a party. If the party owner leaves, the party ownership is transferred to another party member.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesLeavePartyResponse</returns>
        public async System.Threading.Tasks.Task<PartiesLeavePartyResponse> LeavePartyAsync(string partyId, string token, LeavePartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesLeavePartyResponse> localVarResponse = await LeavePartyWithHttpInfoAsync(partyId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Leave Party Leaves a party. If the party owner leaves, the party ownership is transferred to another party member.
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesLeavePartyResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesLeavePartyResponse>> LeavePartyWithHttpInfoAsync(string partyId, string token, LeavePartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->LeaveParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->LeaveParty");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->LeaveParty");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PartiesLeavePartyResponse>("/v1/parties/{party_id}/leave", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaveParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Party Invite APIs Lists party invites
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list invites of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <returns>PartiesListPartyInvitesResponse</returns>
        public PartiesListPartyInvitesResponse ListPartyInvites(string partyId, string token, string userId = default(string))
        {
            Snapser.Client.ApiResponse<PartiesListPartyInvitesResponse> localVarResponse = ListPartyInvitesWithHttpInfo(partyId, token, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Party Invite APIs Lists party invites
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list invites of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <returns>ApiResponse of PartiesListPartyInvitesResponse</returns>
        public Snapser.Client.ApiResponse<PartiesListPartyInvitesResponse> ListPartyInvitesWithHttpInfo(string partyId, string token, string userId = default(string))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->ListPartyInvites");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->ListPartyInvites");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PartiesListPartyInvitesResponse>("/v1/parties/{party_id}/invites", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPartyInvites", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Party Invite APIs Lists party invites
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list invites of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesListPartyInvitesResponse</returns>
        public async System.Threading.Tasks.Task<PartiesListPartyInvitesResponse> ListPartyInvitesAsync(string partyId, string token, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesListPartyInvitesResponse> localVarResponse = await ListPartyInvitesWithHttpInfoAsync(partyId, token, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Party Invite APIs Lists party invites
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list invites of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesListPartyInvitesResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesListPartyInvitesResponse>> ListPartyInvitesWithHttpInfoAsync(string partyId, string token, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->ListPartyInvites");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->ListPartyInvites");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PartiesListPartyInvitesResponse>("/v1/parties/{party_id}/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPartyInvites", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Party Request APIs Lists party requests
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list requests of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <returns>PartiesListPartyRequestsResponse</returns>
        public PartiesListPartyRequestsResponse ListPartyRequests(string partyId, string token, string userId = default(string))
        {
            Snapser.Client.ApiResponse<PartiesListPartyRequestsResponse> localVarResponse = ListPartyRequestsWithHttpInfo(partyId, token, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Party Request APIs Lists party requests
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list requests of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <returns>ApiResponse of PartiesListPartyRequestsResponse</returns>
        public Snapser.Client.ApiResponse<PartiesListPartyRequestsResponse> ListPartyRequestsWithHttpInfo(string partyId, string token, string userId = default(string))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->ListPartyRequests");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->ListPartyRequests");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PartiesListPartyRequestsResponse>("/v1/parties/{party_id}/requests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPartyRequests", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Party Request APIs Lists party requests
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list requests of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesListPartyRequestsResponse</returns>
        public async System.Threading.Tasks.Task<PartiesListPartyRequestsResponse> ListPartyRequestsAsync(string partyId, string token, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesListPartyRequestsResponse> localVarResponse = await ListPartyRequestsWithHttpInfoAsync(partyId, token, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Party Request APIs Lists party requests
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">ID of the user making the request. The user must be in the party to list requests of the party. If using auth, this must match the user_id in the auth token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesListPartyRequestsResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesListPartyRequestsResponse>> ListPartyRequestsWithHttpInfoAsync(string partyId, string token, string userId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->ListPartyRequests");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->ListPartyRequests");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PartiesListPartyRequestsResponse>("/v1/parties/{party_id}/requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPartyRequests", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Party Request APIs Requests to join a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesRequestToJoinPartyResponse</returns>
        public PartiesRequestToJoinPartyResponse RequestToJoinParty(string partyId, string token, JoinPartyRequest body)
        {
            Snapser.Client.ApiResponse<PartiesRequestToJoinPartyResponse> localVarResponse = RequestToJoinPartyWithHttpInfo(partyId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Party Request APIs Requests to join a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesRequestToJoinPartyResponse</returns>
        public Snapser.Client.ApiResponse<PartiesRequestToJoinPartyResponse> RequestToJoinPartyWithHttpInfo(string partyId, string token, JoinPartyRequest body)
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->RequestToJoinParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->RequestToJoinParty");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->RequestToJoinParty");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PartiesRequestToJoinPartyResponse>("/v1/parties/{party_id}/requests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestToJoinParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Party Request APIs Requests to join a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesRequestToJoinPartyResponse</returns>
        public async System.Threading.Tasks.Task<PartiesRequestToJoinPartyResponse> RequestToJoinPartyAsync(string partyId, string token, JoinPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesRequestToJoinPartyResponse> localVarResponse = await RequestToJoinPartyWithHttpInfoAsync(partyId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Party Request APIs Requests to join a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesRequestToJoinPartyResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesRequestToJoinPartyResponse>> RequestToJoinPartyWithHttpInfoAsync(string partyId, string token, JoinPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->RequestToJoinParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->RequestToJoinParty");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->RequestToJoinParty");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PartiesRequestToJoinPartyResponse>("/v1/parties/{party_id}/requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestToJoinParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Parties Searches for parties
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesSearchPartiesResponse</returns>
        public PartiesSearchPartiesResponse SearchParties(string token, PartiesSearchPartiesRequest body)
        {
            Snapser.Client.ApiResponse<PartiesSearchPartiesResponse> localVarResponse = SearchPartiesWithHttpInfo(token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Parties Searches for parties
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesSearchPartiesResponse</returns>
        public Snapser.Client.ApiResponse<PartiesSearchPartiesResponse> SearchPartiesWithHttpInfo(string token, PartiesSearchPartiesRequest body)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->SearchParties");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->SearchParties");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PartiesSearchPartiesResponse>("/v1/parties/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchParties", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Parties Searches for parties
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesSearchPartiesResponse</returns>
        public async System.Threading.Tasks.Task<PartiesSearchPartiesResponse> SearchPartiesAsync(string token, PartiesSearchPartiesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesSearchPartiesResponse> localVarResponse = await SearchPartiesWithHttpInfoAsync(token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Parties Searches for parties
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesSearchPartiesResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesSearchPartiesResponse>> SearchPartiesWithHttpInfoAsync(string token, PartiesSearchPartiesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->SearchParties");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->SearchParties");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PartiesSearchPartiesResponse>("/v1/parties/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchParties", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unban User Unbans a user from a party. Only the party owner can unban users
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesUnbanUserResponse</returns>
        public PartiesUnbanUserResponse UnbanUser(string partyId, string token, UnbanUserRequest body)
        {
            Snapser.Client.ApiResponse<PartiesUnbanUserResponse> localVarResponse = UnbanUserWithHttpInfo(partyId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unban User Unbans a user from a party. Only the party owner can unban users
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesUnbanUserResponse</returns>
        public Snapser.Client.ApiResponse<PartiesUnbanUserResponse> UnbanUserWithHttpInfo(string partyId, string token, UnbanUserRequest body)
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->UnbanUser");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->UnbanUser");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->UnbanUser");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PartiesUnbanUserResponse>("/v1/parties/{party_id}/unban", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnbanUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unban User Unbans a user from a party. Only the party owner can unban users
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesUnbanUserResponse</returns>
        public async System.Threading.Tasks.Task<PartiesUnbanUserResponse> UnbanUserAsync(string partyId, string token, UnbanUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesUnbanUserResponse> localVarResponse = await UnbanUserWithHttpInfoAsync(partyId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unban User Unbans a user from a party. Only the party owner can unban users
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesUnbanUserResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesUnbanUserResponse>> UnbanUserWithHttpInfoAsync(string partyId, string token, UnbanUserRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->UnbanUser");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->UnbanUser");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->UnbanUser");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PartiesUnbanUserResponse>("/v1/parties/{party_id}/unban", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnbanUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit Party APIs Updates a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>PartiesUpdatePartyResponse</returns>
        public PartiesUpdatePartyResponse UpdateParty(string partyId, string token, UpdatePartyRequest body)
        {
            Snapser.Client.ApiResponse<PartiesUpdatePartyResponse> localVarResponse = UpdatePartyWithHttpInfo(partyId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Party APIs Updates a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PartiesUpdatePartyResponse</returns>
        public Snapser.Client.ApiResponse<PartiesUpdatePartyResponse> UpdatePartyWithHttpInfo(string partyId, string token, UpdatePartyRequest body)
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->UpdateParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->UpdateParty");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->UpdateParty");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PartiesUpdatePartyResponse>("/v1/parties/{party_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit Party APIs Updates a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartiesUpdatePartyResponse</returns>
        public async System.Threading.Tasks.Task<PartiesUpdatePartyResponse> UpdatePartyAsync(string partyId, string token, UpdatePartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<PartiesUpdatePartyResponse> localVarResponse = await UpdatePartyWithHttpInfoAsync(partyId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Party APIs Updates a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyId">ID of the party</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartiesUpdatePartyResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<PartiesUpdatePartyResponse>> UpdatePartyWithHttpInfoAsync(string partyId, string token, UpdatePartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling PartiesServiceApi->UpdateParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling PartiesServiceApi->UpdateParty");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling PartiesServiceApi->UpdateParty");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PartiesUpdatePartyResponse>("/v1/parties/{party_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
