/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Snapser.Client;
using Snapser.Model;

namespace Snapser.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatchmakingServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Match
        /// </summary>
        /// <remarks>
        /// Accepts a match for a user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user in the match</param>
        /// <param name="matchId">The match ID to accept</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>MatchmakingAcceptMatchResponse</returns>
        MatchmakingAcceptMatchResponse MatchmakingAcceptMatch(string userId, string matchId, string token, AcceptMatchRequest body);

        /// <summary>
        /// Match
        /// </summary>
        /// <remarks>
        /// Accepts a match for a user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user in the match</param>
        /// <param name="matchId">The match ID to accept</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MatchmakingAcceptMatchResponse</returns>
        ApiResponse<MatchmakingAcceptMatchResponse> MatchmakingAcceptMatchWithHttpInfo(string userId, string matchId, string token, AcceptMatchRequest body);
        /// <summary>
        /// Ticket
        /// </summary>
        /// <remarks>
        /// Create a ticket for a user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>MatchmakingCreateTicketResponse</returns>
        MatchmakingCreateTicketResponse MatchmakingCreateTicket(string userId, string token, CreateTicketsForPartyRequest body);

        /// <summary>
        /// Ticket
        /// </summary>
        /// <remarks>
        /// Create a ticket for a user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MatchmakingCreateTicketResponse</returns>
        ApiResponse<MatchmakingCreateTicketResponse> MatchmakingCreateTicketWithHttpInfo(string userId, string token, CreateTicketsForPartyRequest body);
        /// <summary>
        /// Party
        /// </summary>
        /// <remarks>
        /// Creates tickets for the users of a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is creating the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>MatchmakingListTicketResponse</returns>
        MatchmakingListTicketResponse MatchmakingCreateTicketsForParty(string userId, string partyId, string token, CreateTicketsForPartyRequest body);

        /// <summary>
        /// Party
        /// </summary>
        /// <remarks>
        /// Creates tickets for the users of a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is creating the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MatchmakingListTicketResponse</returns>
        ApiResponse<MatchmakingListTicketResponse> MatchmakingCreateTicketsForPartyWithHttpInfo(string userId, string partyId, string token, CreateTicketsForPartyRequest body);
        /// <summary>
        /// Ticket
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s ticket
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be deleted</param>
        /// <param name="token">User session token</param>
        /// <returns>MatchmakingDeleteTicketResponse</returns>
        MatchmakingDeleteTicketResponse MatchmakingDeleteTicket(string userId, string id, string token);

        /// <summary>
        /// Ticket
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s ticket
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be deleted</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of MatchmakingDeleteTicketResponse</returns>
        ApiResponse<MatchmakingDeleteTicketResponse> MatchmakingDeleteTicketWithHttpInfo(string userId, string id, string token);
        /// <summary>
        /// Party
        /// </summary>
        /// <remarks>
        /// Deletes tickets for the users of a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is deleting the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <returns>Object</returns>
        Object MatchmakingDeleteTicketsForParty(string userId, string partyId, string token);

        /// <summary>
        /// Party
        /// </summary>
        /// <remarks>
        /// Deletes tickets for the users of a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is deleting the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MatchmakingDeleteTicketsForPartyWithHttpInfo(string userId, string partyId, string token);
        /// <summary>
        /// Latency
        /// </summary>
        /// <remarks>
        /// Fetch the region ping urls enabled for matchmaking
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <returns>MatchmakingGetPingUrlsResponse</returns>
        MatchmakingGetPingUrlsResponse MatchmakingGetPingUrls(string token);

        /// <summary>
        /// Latency
        /// </summary>
        /// <remarks>
        /// Fetch the region ping urls enabled for matchmaking
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of MatchmakingGetPingUrlsResponse</returns>
        ApiResponse<MatchmakingGetPingUrlsResponse> MatchmakingGetPingUrlsWithHttpInfo(string token);
        /// <summary>
        /// Ticket
        /// </summary>
        /// <remarks>
        /// Fetch a user&#39;s ticket
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be fetched</param>
        /// <param name="token">User session token</param>
        /// <returns>MatchmakingGetTicketResponse</returns>
        MatchmakingGetTicketResponse MatchmakingGetTicket(string userId, string id, string token);

        /// <summary>
        /// Ticket
        /// </summary>
        /// <remarks>
        /// Fetch a user&#39;s ticket
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be fetched</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of MatchmakingGetTicketResponse</returns>
        ApiResponse<MatchmakingGetTicketResponse> MatchmakingGetTicketWithHttpInfo(string userId, string id, string token);
        /// <summary>
        /// Latency
        /// </summary>
        /// <remarks>
        /// Fetch the titan urls enabled for matchmaking
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <returns>MatchmakingGetTitanUrlsResponse</returns>
        MatchmakingGetTitanUrlsResponse MatchmakingGetTitanUrls(string token);

        /// <summary>
        /// Latency
        /// </summary>
        /// <remarks>
        /// Fetch the titan urls enabled for matchmaking
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of MatchmakingGetTitanUrlsResponse</returns>
        ApiResponse<MatchmakingGetTitanUrlsResponse> MatchmakingGetTitanUrlsWithHttpInfo(string token);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatchmakingServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Match
        /// </summary>
        /// <remarks>
        /// Accepts a match for a user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user in the match</param>
        /// <param name="matchId">The match ID to accept</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingAcceptMatchResponse</returns>
        System.Threading.Tasks.Task<MatchmakingAcceptMatchResponse> MatchmakingAcceptMatchAsync(string userId, string matchId, string token, AcceptMatchRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Match
        /// </summary>
        /// <remarks>
        /// Accepts a match for a user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user in the match</param>
        /// <param name="matchId">The match ID to accept</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingAcceptMatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatchmakingAcceptMatchResponse>> MatchmakingAcceptMatchWithHttpInfoAsync(string userId, string matchId, string token, AcceptMatchRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ticket
        /// </summary>
        /// <remarks>
        /// Create a ticket for a user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingCreateTicketResponse</returns>
        System.Threading.Tasks.Task<MatchmakingCreateTicketResponse> MatchmakingCreateTicketAsync(string userId, string token, CreateTicketsForPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ticket
        /// </summary>
        /// <remarks>
        /// Create a ticket for a user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingCreateTicketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatchmakingCreateTicketResponse>> MatchmakingCreateTicketWithHttpInfoAsync(string userId, string token, CreateTicketsForPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Party
        /// </summary>
        /// <remarks>
        /// Creates tickets for the users of a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is creating the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingListTicketResponse</returns>
        System.Threading.Tasks.Task<MatchmakingListTicketResponse> MatchmakingCreateTicketsForPartyAsync(string userId, string partyId, string token, CreateTicketsForPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Party
        /// </summary>
        /// <remarks>
        /// Creates tickets for the users of a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is creating the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingListTicketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatchmakingListTicketResponse>> MatchmakingCreateTicketsForPartyWithHttpInfoAsync(string userId, string partyId, string token, CreateTicketsForPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ticket
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s ticket
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be deleted</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingDeleteTicketResponse</returns>
        System.Threading.Tasks.Task<MatchmakingDeleteTicketResponse> MatchmakingDeleteTicketAsync(string userId, string id, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ticket
        /// </summary>
        /// <remarks>
        /// Delete a user&#39;s ticket
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be deleted</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingDeleteTicketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatchmakingDeleteTicketResponse>> MatchmakingDeleteTicketWithHttpInfoAsync(string userId, string id, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Party
        /// </summary>
        /// <remarks>
        /// Deletes tickets for the users of a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is deleting the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MatchmakingDeleteTicketsForPartyAsync(string userId, string partyId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Party
        /// </summary>
        /// <remarks>
        /// Deletes tickets for the users of a party
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is deleting the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MatchmakingDeleteTicketsForPartyWithHttpInfoAsync(string userId, string partyId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Latency
        /// </summary>
        /// <remarks>
        /// Fetch the region ping urls enabled for matchmaking
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingGetPingUrlsResponse</returns>
        System.Threading.Tasks.Task<MatchmakingGetPingUrlsResponse> MatchmakingGetPingUrlsAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Latency
        /// </summary>
        /// <remarks>
        /// Fetch the region ping urls enabled for matchmaking
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingGetPingUrlsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatchmakingGetPingUrlsResponse>> MatchmakingGetPingUrlsWithHttpInfoAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ticket
        /// </summary>
        /// <remarks>
        /// Fetch a user&#39;s ticket
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be fetched</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingGetTicketResponse</returns>
        System.Threading.Tasks.Task<MatchmakingGetTicketResponse> MatchmakingGetTicketAsync(string userId, string id, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ticket
        /// </summary>
        /// <remarks>
        /// Fetch a user&#39;s ticket
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be fetched</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingGetTicketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatchmakingGetTicketResponse>> MatchmakingGetTicketWithHttpInfoAsync(string userId, string id, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Latency
        /// </summary>
        /// <remarks>
        /// Fetch the titan urls enabled for matchmaking
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingGetTitanUrlsResponse</returns>
        System.Threading.Tasks.Task<MatchmakingGetTitanUrlsResponse> MatchmakingGetTitanUrlsAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Latency
        /// </summary>
        /// <remarks>
        /// Fetch the titan urls enabled for matchmaking
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingGetTitanUrlsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatchmakingGetTitanUrlsResponse>> MatchmakingGetTitanUrlsWithHttpInfoAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatchmakingServiceApi : IMatchmakingServiceApiSync, IMatchmakingServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MatchmakingServiceApi : IDisposable, IMatchmakingServiceApi
    {
        private Snapser.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MatchmakingServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MatchmakingServiceApi(string basePath)
        {
            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingServiceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MatchmakingServiceApi(Snapser.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingServiceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MatchmakingServiceApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingServiceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MatchmakingServiceApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingServiceApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MatchmakingServiceApi(HttpClient client, Snapser.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MatchmakingServiceApi(Snapser.Client.ISynchronousClient client, Snapser.Client.IAsynchronousClient asyncClient, Snapser.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Snapser.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Snapser.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Snapser.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Snapser.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Snapser.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Match Accepts a match for a user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user in the match</param>
        /// <param name="matchId">The match ID to accept</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>MatchmakingAcceptMatchResponse</returns>
        public MatchmakingAcceptMatchResponse MatchmakingAcceptMatch(string userId, string matchId, string token, AcceptMatchRequest body)
        {
            Snapser.Client.ApiResponse<MatchmakingAcceptMatchResponse> localVarResponse = MatchmakingAcceptMatchWithHttpInfo(userId, matchId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Match Accepts a match for a user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user in the match</param>
        /// <param name="matchId">The match ID to accept</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MatchmakingAcceptMatchResponse</returns>
        public Snapser.Client.ApiResponse<MatchmakingAcceptMatchResponse> MatchmakingAcceptMatchWithHttpInfo(string userId, string matchId, string token, AcceptMatchRequest body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling MatchmakingServiceApi->MatchmakingAcceptMatch");

            // verify the required parameter 'matchId' is set
            if (matchId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'matchId' when calling MatchmakingServiceApi->MatchmakingAcceptMatch");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingAcceptMatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling MatchmakingServiceApi->MatchmakingAcceptMatch");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("match_id", Snapser.Client.ClientUtils.ParameterToString(matchId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MatchmakingAcceptMatchResponse>("/v1/matchmaking/users/{user_id}/matches/{match_id}/accept", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingAcceptMatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Match Accepts a match for a user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user in the match</param>
        /// <param name="matchId">The match ID to accept</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingAcceptMatchResponse</returns>
        public async System.Threading.Tasks.Task<MatchmakingAcceptMatchResponse> MatchmakingAcceptMatchAsync(string userId, string matchId, string token, AcceptMatchRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<MatchmakingAcceptMatchResponse> localVarResponse = await MatchmakingAcceptMatchWithHttpInfoAsync(userId, matchId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Match Accepts a match for a user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user in the match</param>
        /// <param name="matchId">The match ID to accept</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingAcceptMatchResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<MatchmakingAcceptMatchResponse>> MatchmakingAcceptMatchWithHttpInfoAsync(string userId, string matchId, string token, AcceptMatchRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling MatchmakingServiceApi->MatchmakingAcceptMatch");

            // verify the required parameter 'matchId' is set
            if (matchId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'matchId' when calling MatchmakingServiceApi->MatchmakingAcceptMatch");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingAcceptMatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling MatchmakingServiceApi->MatchmakingAcceptMatch");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("match_id", Snapser.Client.ClientUtils.ParameterToString(matchId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MatchmakingAcceptMatchResponse>("/v1/matchmaking/users/{user_id}/matches/{match_id}/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingAcceptMatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ticket Create a ticket for a user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>MatchmakingCreateTicketResponse</returns>
        public MatchmakingCreateTicketResponse MatchmakingCreateTicket(string userId, string token, CreateTicketsForPartyRequest body)
        {
            Snapser.Client.ApiResponse<MatchmakingCreateTicketResponse> localVarResponse = MatchmakingCreateTicketWithHttpInfo(userId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ticket Create a ticket for a user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MatchmakingCreateTicketResponse</returns>
        public Snapser.Client.ApiResponse<MatchmakingCreateTicketResponse> MatchmakingCreateTicketWithHttpInfo(string userId, string token, CreateTicketsForPartyRequest body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling MatchmakingServiceApi->MatchmakingCreateTicket");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingCreateTicket");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling MatchmakingServiceApi->MatchmakingCreateTicket");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MatchmakingCreateTicketResponse>("/v1/matchmaking/users/{user_id}/tickets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingCreateTicket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ticket Create a ticket for a user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingCreateTicketResponse</returns>
        public async System.Threading.Tasks.Task<MatchmakingCreateTicketResponse> MatchmakingCreateTicketAsync(string userId, string token, CreateTicketsForPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<MatchmakingCreateTicketResponse> localVarResponse = await MatchmakingCreateTicketWithHttpInfoAsync(userId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ticket Create a ticket for a user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingCreateTicketResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<MatchmakingCreateTicketResponse>> MatchmakingCreateTicketWithHttpInfoAsync(string userId, string token, CreateTicketsForPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling MatchmakingServiceApi->MatchmakingCreateTicket");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingCreateTicket");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling MatchmakingServiceApi->MatchmakingCreateTicket");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MatchmakingCreateTicketResponse>("/v1/matchmaking/users/{user_id}/tickets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingCreateTicket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Party Creates tickets for the users of a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is creating the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>MatchmakingListTicketResponse</returns>
        public MatchmakingListTicketResponse MatchmakingCreateTicketsForParty(string userId, string partyId, string token, CreateTicketsForPartyRequest body)
        {
            Snapser.Client.ApiResponse<MatchmakingListTicketResponse> localVarResponse = MatchmakingCreateTicketsForPartyWithHttpInfo(userId, partyId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Party Creates tickets for the users of a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is creating the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MatchmakingListTicketResponse</returns>
        public Snapser.Client.ApiResponse<MatchmakingListTicketResponse> MatchmakingCreateTicketsForPartyWithHttpInfo(string userId, string partyId, string token, CreateTicketsForPartyRequest body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling MatchmakingServiceApi->MatchmakingCreateTicketsForParty");

            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling MatchmakingServiceApi->MatchmakingCreateTicketsForParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingCreateTicketsForParty");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling MatchmakingServiceApi->MatchmakingCreateTicketsForParty");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MatchmakingListTicketResponse>("/v1/matchmaking/users/{user_id}/party/{party_id}/tickets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingCreateTicketsForParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Party Creates tickets for the users of a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is creating the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingListTicketResponse</returns>
        public async System.Threading.Tasks.Task<MatchmakingListTicketResponse> MatchmakingCreateTicketsForPartyAsync(string userId, string partyId, string token, CreateTicketsForPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<MatchmakingListTicketResponse> localVarResponse = await MatchmakingCreateTicketsForPartyWithHttpInfoAsync(userId, partyId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Party Creates tickets for the users of a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is creating the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingListTicketResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<MatchmakingListTicketResponse>> MatchmakingCreateTicketsForPartyWithHttpInfoAsync(string userId, string partyId, string token, CreateTicketsForPartyRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling MatchmakingServiceApi->MatchmakingCreateTicketsForParty");

            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling MatchmakingServiceApi->MatchmakingCreateTicketsForParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingCreateTicketsForParty");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling MatchmakingServiceApi->MatchmakingCreateTicketsForParty");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MatchmakingListTicketResponse>("/v1/matchmaking/users/{user_id}/party/{party_id}/tickets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingCreateTicketsForParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ticket Delete a user&#39;s ticket
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be deleted</param>
        /// <param name="token">User session token</param>
        /// <returns>MatchmakingDeleteTicketResponse</returns>
        public MatchmakingDeleteTicketResponse MatchmakingDeleteTicket(string userId, string id, string token)
        {
            Snapser.Client.ApiResponse<MatchmakingDeleteTicketResponse> localVarResponse = MatchmakingDeleteTicketWithHttpInfo(userId, id, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ticket Delete a user&#39;s ticket
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be deleted</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of MatchmakingDeleteTicketResponse</returns>
        public Snapser.Client.ApiResponse<MatchmakingDeleteTicketResponse> MatchmakingDeleteTicketWithHttpInfo(string userId, string id, string token)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling MatchmakingServiceApi->MatchmakingDeleteTicket");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'id' when calling MatchmakingServiceApi->MatchmakingDeleteTicket");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingDeleteTicket");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Snapser.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<MatchmakingDeleteTicketResponse>("/v1/matchmaking/users/{user_id}/tickets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingDeleteTicket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ticket Delete a user&#39;s ticket
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be deleted</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingDeleteTicketResponse</returns>
        public async System.Threading.Tasks.Task<MatchmakingDeleteTicketResponse> MatchmakingDeleteTicketAsync(string userId, string id, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<MatchmakingDeleteTicketResponse> localVarResponse = await MatchmakingDeleteTicketWithHttpInfoAsync(userId, id, token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ticket Delete a user&#39;s ticket
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be deleted</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingDeleteTicketResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<MatchmakingDeleteTicketResponse>> MatchmakingDeleteTicketWithHttpInfoAsync(string userId, string id, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling MatchmakingServiceApi->MatchmakingDeleteTicket");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'id' when calling MatchmakingServiceApi->MatchmakingDeleteTicket");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingDeleteTicket");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Snapser.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<MatchmakingDeleteTicketResponse>("/v1/matchmaking/users/{user_id}/tickets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingDeleteTicket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Party Deletes tickets for the users of a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is deleting the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <returns>Object</returns>
        public Object MatchmakingDeleteTicketsForParty(string userId, string partyId, string token)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = MatchmakingDeleteTicketsForPartyWithHttpInfo(userId, partyId, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Party Deletes tickets for the users of a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is deleting the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> MatchmakingDeleteTicketsForPartyWithHttpInfo(string userId, string partyId, string token)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling MatchmakingServiceApi->MatchmakingDeleteTicketsForParty");

            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling MatchmakingServiceApi->MatchmakingDeleteTicketsForParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingDeleteTicketsForParty");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/matchmaking/users/{user_id}/party/{party_id}/tickets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingDeleteTicketsForParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Party Deletes tickets for the users of a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is deleting the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MatchmakingDeleteTicketsForPartyAsync(string userId, string partyId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = await MatchmakingDeleteTicketsForPartyWithHttpInfoAsync(userId, partyId, token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Party Deletes tickets for the users of a party
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID that is deleting the tickets, must be the owner of the party</param>
        /// <param name="partyId">Party ID for the party to be matched</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> MatchmakingDeleteTicketsForPartyWithHttpInfoAsync(string userId, string partyId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling MatchmakingServiceApi->MatchmakingDeleteTicketsForParty");

            // verify the required parameter 'partyId' is set
            if (partyId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'partyId' when calling MatchmakingServiceApi->MatchmakingDeleteTicketsForParty");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingDeleteTicketsForParty");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("party_id", Snapser.Client.ClientUtils.ParameterToString(partyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/matchmaking/users/{user_id}/party/{party_id}/tickets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingDeleteTicketsForParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Latency Fetch the region ping urls enabled for matchmaking
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <returns>MatchmakingGetPingUrlsResponse</returns>
        public MatchmakingGetPingUrlsResponse MatchmakingGetPingUrls(string token)
        {
            Snapser.Client.ApiResponse<MatchmakingGetPingUrlsResponse> localVarResponse = MatchmakingGetPingUrlsWithHttpInfo(token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Latency Fetch the region ping urls enabled for matchmaking
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of MatchmakingGetPingUrlsResponse</returns>
        public Snapser.Client.ApiResponse<MatchmakingGetPingUrlsResponse> MatchmakingGetPingUrlsWithHttpInfo(string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingGetPingUrls");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<MatchmakingGetPingUrlsResponse>("/v1/matchmaking/pingUrls", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingGetPingUrls", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Latency Fetch the region ping urls enabled for matchmaking
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingGetPingUrlsResponse</returns>
        public async System.Threading.Tasks.Task<MatchmakingGetPingUrlsResponse> MatchmakingGetPingUrlsAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<MatchmakingGetPingUrlsResponse> localVarResponse = await MatchmakingGetPingUrlsWithHttpInfoAsync(token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Latency Fetch the region ping urls enabled for matchmaking
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingGetPingUrlsResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<MatchmakingGetPingUrlsResponse>> MatchmakingGetPingUrlsWithHttpInfoAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingGetPingUrls");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MatchmakingGetPingUrlsResponse>("/v1/matchmaking/pingUrls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingGetPingUrls", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ticket Fetch a user&#39;s ticket
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be fetched</param>
        /// <param name="token">User session token</param>
        /// <returns>MatchmakingGetTicketResponse</returns>
        public MatchmakingGetTicketResponse MatchmakingGetTicket(string userId, string id, string token)
        {
            Snapser.Client.ApiResponse<MatchmakingGetTicketResponse> localVarResponse = MatchmakingGetTicketWithHttpInfo(userId, id, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ticket Fetch a user&#39;s ticket
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be fetched</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of MatchmakingGetTicketResponse</returns>
        public Snapser.Client.ApiResponse<MatchmakingGetTicketResponse> MatchmakingGetTicketWithHttpInfo(string userId, string id, string token)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling MatchmakingServiceApi->MatchmakingGetTicket");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'id' when calling MatchmakingServiceApi->MatchmakingGetTicket");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingGetTicket");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Snapser.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<MatchmakingGetTicketResponse>("/v1/matchmaking/users/{user_id}/tickets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingGetTicket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ticket Fetch a user&#39;s ticket
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be fetched</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingGetTicketResponse</returns>
        public async System.Threading.Tasks.Task<MatchmakingGetTicketResponse> MatchmakingGetTicketAsync(string userId, string id, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<MatchmakingGetTicketResponse> localVarResponse = await MatchmakingGetTicketWithHttpInfoAsync(userId, id, token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ticket Fetch a user&#39;s ticket
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the user to be matched</param>
        /// <param name="id">The ticket ID to be fetched</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingGetTicketResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<MatchmakingGetTicketResponse>> MatchmakingGetTicketWithHttpInfoAsync(string userId, string id, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling MatchmakingServiceApi->MatchmakingGetTicket");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'id' when calling MatchmakingServiceApi->MatchmakingGetTicket");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingGetTicket");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Snapser.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MatchmakingGetTicketResponse>("/v1/matchmaking/users/{user_id}/tickets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingGetTicket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Latency Fetch the titan urls enabled for matchmaking
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <returns>MatchmakingGetTitanUrlsResponse</returns>
        public MatchmakingGetTitanUrlsResponse MatchmakingGetTitanUrls(string token)
        {
            Snapser.Client.ApiResponse<MatchmakingGetTitanUrlsResponse> localVarResponse = MatchmakingGetTitanUrlsWithHttpInfo(token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Latency Fetch the titan urls enabled for matchmaking
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of MatchmakingGetTitanUrlsResponse</returns>
        public Snapser.Client.ApiResponse<MatchmakingGetTitanUrlsResponse> MatchmakingGetTitanUrlsWithHttpInfo(string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingGetTitanUrls");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<MatchmakingGetTitanUrlsResponse>("/v1/matchmaking/titanUrls", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingGetTitanUrls", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Latency Fetch the titan urls enabled for matchmaking
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchmakingGetTitanUrlsResponse</returns>
        public async System.Threading.Tasks.Task<MatchmakingGetTitanUrlsResponse> MatchmakingGetTitanUrlsAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<MatchmakingGetTitanUrlsResponse> localVarResponse = await MatchmakingGetTitanUrlsWithHttpInfoAsync(token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Latency Fetch the titan urls enabled for matchmaking
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchmakingGetTitanUrlsResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<MatchmakingGetTitanUrlsResponse>> MatchmakingGetTitanUrlsWithHttpInfoAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling MatchmakingServiceApi->MatchmakingGetTitanUrls");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MatchmakingGetTitanUrlsResponse>("/v1/matchmaking/titanUrls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchmakingGetTitanUrls", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
