/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// DisassociateLoginRequest
    /// </summary>
    [DataContract(Name = "DisassociateLogin_request")]
    public partial class DisassociateLoginRequest : IEquatable<DisassociateLoginRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LoginType
        /// </summary>
        [DataMember(Name = "login_type", IsRequired = true, EmitDefaultValue = true)]
        public AuthLoginTypeType LoginType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DisassociateLoginRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DisassociateLoginRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DisassociateLoginRequest" /> class.
        /// </summary>
        /// <param name="loginType">loginType (required).</param>
        public DisassociateLoginRequest(AuthLoginTypeType loginType = default(AuthLoginTypeType))
        {
            this.LoginType = loginType;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DisassociateLoginRequest {\n");
            sb.Append("  LoginType: ").Append(LoginType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DisassociateLoginRequest);
        }

        /// <summary>
        /// Returns true if DisassociateLoginRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DisassociateLoginRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisassociateLoginRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LoginType == input.LoginType ||
                    this.LoginType.Equals(input.LoginType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LoginType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
