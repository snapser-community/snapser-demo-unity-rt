/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// SnapserEventType describes a \&quot;message\&quot; event type, this is what SnapserEvent will have as a payload 99% of the time.
    /// </summary>
    [DataContract(Name = "eventbusSnapserEventType")]
    public partial class EventbusSnapserEventType : IEquatable<EventbusSnapserEventType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventbusSnapserEventType" /> class.
        /// </summary>
        /// <param name="description">A short one line description used to describe when the event is fired.  This is used initially in the admin UI when selecting events..</param>
        /// <param name="eventTypeEnumValue">eventTypeEnumValue.</param>
        /// <param name="eventTypeId">eventTypeId.</param>
        /// <param name="messageType">messageType.</param>
        /// <param name="serviceName">serviceName.</param>
        /// <param name="subject">subject.</param>
        public EventbusSnapserEventType(string description = default(string), long eventTypeEnumValue = default(long), long eventTypeId = default(long), string messageType = default(string), string serviceName = default(string), string subject = default(string))
        {
            this.Description = description;
            this.EventTypeEnumValue = eventTypeEnumValue;
            this.EventTypeId = eventTypeId;
            this.MessageType = messageType;
            this.ServiceName = serviceName;
            this.Subject = subject;
        }

        /// <summary>
        /// A short one line description used to describe when the event is fired.  This is used initially in the admin UI when selecting events.
        /// </summary>
        /// <value>A short one line description used to describe when the event is fired.  This is used initially in the admin UI when selecting events.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EventTypeEnumValue
        /// </summary>
        [DataMember(Name = "event_type_enum_value", EmitDefaultValue = false)]
        public long EventTypeEnumValue { get; set; }

        /// <summary>
        /// Gets or Sets EventTypeId
        /// </summary>
        [DataMember(Name = "event_type_id", EmitDefaultValue = false)]
        public long EventTypeId { get; set; }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "message_type", EmitDefaultValue = false)]
        public string MessageType { get; set; }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name = "service_name", EmitDefaultValue = false)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventbusSnapserEventType {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EventTypeEnumValue: ").Append(EventTypeEnumValue).Append("\n");
            sb.Append("  EventTypeId: ").Append(EventTypeId).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventbusSnapserEventType);
        }

        /// <summary>
        /// Returns true if EventbusSnapserEventType instances are equal
        /// </summary>
        /// <param name="input">Instance of EventbusSnapserEventType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventbusSnapserEventType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EventTypeEnumValue == input.EventTypeEnumValue ||
                    this.EventTypeEnumValue.Equals(input.EventTypeEnumValue)
                ) && 
                (
                    this.EventTypeId == input.EventTypeId ||
                    this.EventTypeId.Equals(input.EventTypeId)
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EventTypeEnumValue.GetHashCode();
                hashCode = (hashCode * 59) + this.EventTypeId.GetHashCode();
                if (this.MessageType != null)
                {
                    hashCode = (hashCode * 59) + this.MessageType.GetHashCode();
                }
                if (this.ServiceName != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceName.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
