/*
 * cjdevents
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: cjdevents: v3 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// UpdatePartyRequest
    /// </summary>
    [DataContract(Name = "UpdateParty_request")]
    public partial class UpdatePartyRequest : IEquatable<UpdatePartyRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePartyRequest" /> class.
        /// </summary>
        /// <param name="maxPlayers">The max number of players to allow in the party.</param>
        /// <param name="metadata">A Json document of metadata to be stored with the party.</param>
        /// <param name="ownerId">The owner of the party. If using auth, this must match the user_id in the auth token.</param>
        /// <param name="partyName">Name of the party.</param>
        /// <param name="searchProperties">A Json document that will be indexed for full text searching.</param>
        /// <param name="status">The status of the party. Defaults to open. Valid names: PARTY_STATUS_OPEN, PARTY_STATUS_FULL, PARTY_STATUS_IN_GAME.</param>
        /// <param name="visibility">The visibility of the party. Defaults to private. Valid names: PARTY_VISIBILITY_PUBLIC, PARTY_VISIBILITY_PRIVATE, PARTY_VISIBILITY_INVITE_ONLY, PARTY_VISIBILITY_FRIENDS_ONLY.</param>
        public UpdatePartyRequest(long maxPlayers = default(long), Object metadata = default(Object), string ownerId = default(string), string partyName = default(string), Object searchProperties = default(Object), string status = default(string), string visibility = default(string))
        {
            this.MaxPlayers = maxPlayers;
            this.Metadata = metadata;
            this.OwnerId = ownerId;
            this.PartyName = partyName;
            this.SearchProperties = searchProperties;
            this.Status = status;
            this.Visibility = visibility;
        }

        /// <summary>
        /// The max number of players to allow in the party
        /// </summary>
        /// <value>The max number of players to allow in the party</value>
        [DataMember(Name = "max_players", EmitDefaultValue = false)]
        public long MaxPlayers { get; set; }

        /// <summary>
        /// A Json document of metadata to be stored with the party
        /// </summary>
        /// <value>A Json document of metadata to be stored with the party</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// The owner of the party. If using auth, this must match the user_id in the auth token
        /// </summary>
        /// <value>The owner of the party. If using auth, this must match the user_id in the auth token</value>
        [DataMember(Name = "owner_id", EmitDefaultValue = false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Name of the party
        /// </summary>
        /// <value>Name of the party</value>
        [DataMember(Name = "party_name", EmitDefaultValue = false)]
        public string PartyName { get; set; }

        /// <summary>
        /// A Json document that will be indexed for full text searching
        /// </summary>
        /// <value>A Json document that will be indexed for full text searching</value>
        [DataMember(Name = "search_properties", EmitDefaultValue = false)]
        public Object SearchProperties { get; set; }

        /// <summary>
        /// The status of the party. Defaults to open. Valid names: PARTY_STATUS_OPEN, PARTY_STATUS_FULL, PARTY_STATUS_IN_GAME
        /// </summary>
        /// <value>The status of the party. Defaults to open. Valid names: PARTY_STATUS_OPEN, PARTY_STATUS_FULL, PARTY_STATUS_IN_GAME</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The visibility of the party. Defaults to private. Valid names: PARTY_VISIBILITY_PUBLIC, PARTY_VISIBILITY_PRIVATE, PARTY_VISIBILITY_INVITE_ONLY, PARTY_VISIBILITY_FRIENDS_ONLY
        /// </summary>
        /// <value>The visibility of the party. Defaults to private. Valid names: PARTY_VISIBILITY_PUBLIC, PARTY_VISIBILITY_PRIVATE, PARTY_VISIBILITY_INVITE_ONLY, PARTY_VISIBILITY_FRIENDS_ONLY</value>
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public string Visibility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdatePartyRequest {\n");
            sb.Append("  MaxPlayers: ").Append(MaxPlayers).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  PartyName: ").Append(PartyName).Append("\n");
            sb.Append("  SearchProperties: ").Append(SearchProperties).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdatePartyRequest);
        }

        /// <summary>
        /// Returns true if UpdatePartyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdatePartyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatePartyRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxPlayers == input.MaxPlayers ||
                    this.MaxPlayers.Equals(input.MaxPlayers)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.PartyName == input.PartyName ||
                    (this.PartyName != null &&
                    this.PartyName.Equals(input.PartyName))
                ) && 
                (
                    this.SearchProperties == input.SearchProperties ||
                    (this.SearchProperties != null &&
                    this.SearchProperties.Equals(input.SearchProperties))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    (this.Visibility != null &&
                    this.Visibility.Equals(input.Visibility))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaxPlayers.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.OwnerId != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerId.GetHashCode();
                }
                if (this.PartyName != null)
                {
                    hashCode = (hashCode * 59) + this.PartyName.GetHashCode();
                }
                if (this.SearchProperties != null)
                {
                    hashCode = (hashCode * 59) + this.SearchProperties.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Visibility != null)
                {
                    hashCode = (hashCode * 59) + this.Visibility.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
