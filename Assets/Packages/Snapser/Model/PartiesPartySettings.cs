/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// PartySettings represents the configurable settings of a party.
    /// </summary>
    [DataContract(Name = "partiesPartySettings")]
    public partial class PartiesPartySettings : IEquatable<PartiesPartySettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesPartySettings" /> class.
        /// </summary>
        /// <param name="allowMemberJoinInGame">AllowMemberJoinInGame indicates if party members can join the party while the party is in a game..</param>
        /// <param name="allowMemberMatchmaking">AllowMemberMatchmaking indicates if party members can queue/dequeue on behalf of the party..</param>
        /// <param name="allowPartyUpdatesInGame">AllowPartyUpdatesInGame indicates if the party can be updated while the party is in a game..</param>
        public PartiesPartySettings(bool allowMemberJoinInGame = default(bool), bool allowMemberMatchmaking = default(bool), bool allowPartyUpdatesInGame = default(bool))
        {
            this.AllowMemberJoinInGame = allowMemberJoinInGame;
            this.AllowMemberMatchmaking = allowMemberMatchmaking;
            this.AllowPartyUpdatesInGame = allowPartyUpdatesInGame;
        }

        /// <summary>
        /// AllowMemberJoinInGame indicates if party members can join the party while the party is in a game.
        /// </summary>
        /// <value>AllowMemberJoinInGame indicates if party members can join the party while the party is in a game.</value>
        [DataMember(Name = "allow_member_join_in_game", EmitDefaultValue = true)]
        public bool AllowMemberJoinInGame { get; set; }

        /// <summary>
        /// AllowMemberMatchmaking indicates if party members can queue/dequeue on behalf of the party.
        /// </summary>
        /// <value>AllowMemberMatchmaking indicates if party members can queue/dequeue on behalf of the party.</value>
        [DataMember(Name = "allow_member_matchmaking", EmitDefaultValue = true)]
        public bool AllowMemberMatchmaking { get; set; }

        /// <summary>
        /// AllowPartyUpdatesInGame indicates if the party can be updated while the party is in a game.
        /// </summary>
        /// <value>AllowPartyUpdatesInGame indicates if the party can be updated while the party is in a game.</value>
        [DataMember(Name = "allow_party_updates_in_game", EmitDefaultValue = true)]
        public bool AllowPartyUpdatesInGame { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartiesPartySettings {\n");
            sb.Append("  AllowMemberJoinInGame: ").Append(AllowMemberJoinInGame).Append("\n");
            sb.Append("  AllowMemberMatchmaking: ").Append(AllowMemberMatchmaking).Append("\n");
            sb.Append("  AllowPartyUpdatesInGame: ").Append(AllowPartyUpdatesInGame).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartiesPartySettings);
        }

        /// <summary>
        /// Returns true if PartiesPartySettings instances are equal
        /// </summary>
        /// <param name="input">Instance of PartiesPartySettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartiesPartySettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllowMemberJoinInGame == input.AllowMemberJoinInGame ||
                    this.AllowMemberJoinInGame.Equals(input.AllowMemberJoinInGame)
                ) && 
                (
                    this.AllowMemberMatchmaking == input.AllowMemberMatchmaking ||
                    this.AllowMemberMatchmaking.Equals(input.AllowMemberMatchmaking)
                ) && 
                (
                    this.AllowPartyUpdatesInGame == input.AllowPartyUpdatesInGame ||
                    this.AllowPartyUpdatesInGame.Equals(input.AllowPartyUpdatesInGame)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AllowMemberJoinInGame.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowMemberMatchmaking.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowPartyUpdatesInGame.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
