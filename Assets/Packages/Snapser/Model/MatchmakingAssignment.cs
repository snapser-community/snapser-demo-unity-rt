/*
 * cjdevents
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: cjdevents: v3 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// An Assignment represents a game server assignment associated with a Ticket.
    /// </summary>
    [DataContract(Name = "matchmakingAssignment")]
    public partial class MatchmakingAssignment : IEquatable<MatchmakingAssignment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingAssignment" /> class.
        /// </summary>
        /// <param name="connectionString">connectionString.</param>
        /// <param name="error">error.</param>
        /// <param name="isAccepted">isAccepted.</param>
        /// <param name="isHost">isHost.</param>
        /// <param name="joinCode">joinCode.</param>
        /// <param name="matchId">Connection information for this Assignment..</param>
        /// <param name="matchProfile">The match profile used to generate this match..</param>
        /// <param name="serverAllocation">serverAllocation.</param>
        /// <param name="ticketIds">ticketIds.</param>
        /// <param name="userIds">userIds.</param>
        public MatchmakingAssignment(string connectionString = default(string), string error = default(string), bool isAccepted = default(bool), bool isHost = default(bool), string joinCode = default(string), string matchId = default(string), string matchProfile = default(string), MatchmakingServerAllocation serverAllocation = default(MatchmakingServerAllocation), List<string> ticketIds = default(List<string>), List<string> userIds = default(List<string>))
        {
            this.ConnectionString = connectionString;
            this.Error = error;
            this.IsAccepted = isAccepted;
            this.IsHost = isHost;
            this.JoinCode = joinCode;
            this.MatchId = matchId;
            this.MatchProfile = matchProfile;
            this.ServerAllocation = serverAllocation;
            this.TicketIds = ticketIds;
            this.UserIds = userIds;
        }

        /// <summary>
        /// Gets or Sets ConnectionString
        /// </summary>
        [DataMember(Name = "connection_string", EmitDefaultValue = false)]
        public string ConnectionString { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets IsAccepted
        /// </summary>
        [DataMember(Name = "is_accepted", EmitDefaultValue = true)]
        public bool IsAccepted { get; set; }

        /// <summary>
        /// Gets or Sets IsHost
        /// </summary>
        [DataMember(Name = "is_host", EmitDefaultValue = true)]
        public bool IsHost { get; set; }

        /// <summary>
        /// Gets or Sets JoinCode
        /// </summary>
        [DataMember(Name = "join_code", EmitDefaultValue = false)]
        public string JoinCode { get; set; }

        /// <summary>
        /// Connection information for this Assignment.
        /// </summary>
        /// <value>Connection information for this Assignment.</value>
        [DataMember(Name = "match_id", EmitDefaultValue = false)]
        public string MatchId { get; set; }

        /// <summary>
        /// The match profile used to generate this match.
        /// </summary>
        /// <value>The match profile used to generate this match.</value>
        [DataMember(Name = "match_profile", EmitDefaultValue = false)]
        public string MatchProfile { get; set; }

        /// <summary>
        /// Gets or Sets ServerAllocation
        /// </summary>
        [DataMember(Name = "server_allocation", EmitDefaultValue = false)]
        public MatchmakingServerAllocation ServerAllocation { get; set; }

        /// <summary>
        /// Gets or Sets TicketIds
        /// </summary>
        [DataMember(Name = "ticket_ids", EmitDefaultValue = false)]
        public List<string> TicketIds { get; set; }

        /// <summary>
        /// Gets or Sets UserIds
        /// </summary>
        [DataMember(Name = "user_ids", EmitDefaultValue = false)]
        public List<string> UserIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchmakingAssignment {\n");
            sb.Append("  ConnectionString: ").Append(ConnectionString).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  IsAccepted: ").Append(IsAccepted).Append("\n");
            sb.Append("  IsHost: ").Append(IsHost).Append("\n");
            sb.Append("  JoinCode: ").Append(JoinCode).Append("\n");
            sb.Append("  MatchId: ").Append(MatchId).Append("\n");
            sb.Append("  MatchProfile: ").Append(MatchProfile).Append("\n");
            sb.Append("  ServerAllocation: ").Append(ServerAllocation).Append("\n");
            sb.Append("  TicketIds: ").Append(TicketIds).Append("\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchmakingAssignment);
        }

        /// <summary>
        /// Returns true if MatchmakingAssignment instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchmakingAssignment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchmakingAssignment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConnectionString == input.ConnectionString ||
                    (this.ConnectionString != null &&
                    this.ConnectionString.Equals(input.ConnectionString))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.IsAccepted == input.IsAccepted ||
                    this.IsAccepted.Equals(input.IsAccepted)
                ) && 
                (
                    this.IsHost == input.IsHost ||
                    this.IsHost.Equals(input.IsHost)
                ) && 
                (
                    this.JoinCode == input.JoinCode ||
                    (this.JoinCode != null &&
                    this.JoinCode.Equals(input.JoinCode))
                ) && 
                (
                    this.MatchId == input.MatchId ||
                    (this.MatchId != null &&
                    this.MatchId.Equals(input.MatchId))
                ) && 
                (
                    this.MatchProfile == input.MatchProfile ||
                    (this.MatchProfile != null &&
                    this.MatchProfile.Equals(input.MatchProfile))
                ) && 
                (
                    this.ServerAllocation == input.ServerAllocation ||
                    (this.ServerAllocation != null &&
                    this.ServerAllocation.Equals(input.ServerAllocation))
                ) && 
                (
                    this.TicketIds == input.TicketIds ||
                    this.TicketIds != null &&
                    input.TicketIds != null &&
                    this.TicketIds.SequenceEqual(input.TicketIds)
                ) && 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    input.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectionString != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionString.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAccepted.GetHashCode();
                hashCode = (hashCode * 59) + this.IsHost.GetHashCode();
                if (this.JoinCode != null)
                {
                    hashCode = (hashCode * 59) + this.JoinCode.GetHashCode();
                }
                if (this.MatchId != null)
                {
                    hashCode = (hashCode * 59) + this.MatchId.GetHashCode();
                }
                if (this.MatchProfile != null)
                {
                    hashCode = (hashCode * 59) + this.MatchProfile.GetHashCode();
                }
                if (this.ServerAllocation != null)
                {
                    hashCode = (hashCode * 59) + this.ServerAllocation.GetHashCode();
                }
                if (this.TicketIds != null)
                {
                    hashCode = (hashCode * 59) + this.TicketIds.GetHashCode();
                }
                if (this.UserIds != null)
                {
                    hashCode = (hashCode * 59) + this.UserIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
