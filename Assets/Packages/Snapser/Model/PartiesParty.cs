/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// PartiesParty
    /// </summary>
    [DataContract(Name = "partiesParty")]
    public partial class PartiesParty : IEquatable<PartiesParty>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public PartiesPartyStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public PartiesPartyVisibility? Visibility { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesParty" /> class.
        /// </summary>
        /// <param name="bannedPlayers">bannedPlayers.</param>
        /// <param name="connectionString">connectionString.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="id">id.</param>
        /// <param name="maxPlayers">maxPlayers.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="owner">owner.</param>
        /// <param name="partyName">partyName.</param>
        /// <param name="players">players.</param>
        /// <param name="searchProperties">searchProperties.</param>
        /// <param name="settings">settings.</param>
        /// <param name="status">status.</param>
        /// <param name="type">type.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="visibility">visibility.</param>
        public PartiesParty(Dictionary<string, Object> bannedPlayers = default(Dictionary<string, Object>), string connectionString = default(string), string createdAt = default(string), string id = default(string), string maxPlayers = default(string), Object metadata = default(Object), string owner = default(string), string partyName = default(string), Dictionary<string, Object> players = default(Dictionary<string, Object>), Object searchProperties = default(Object), PartiesPartySettings settings = default(PartiesPartySettings), PartiesPartyStatus? status = default(PartiesPartyStatus?), string type = default(string), string updatedAt = default(string), PartiesPartyVisibility? visibility = default(PartiesPartyVisibility?))
        {
            this.BannedPlayers = bannedPlayers;
            this.ConnectionString = connectionString;
            this.CreatedAt = createdAt;
            this.Id = id;
            this.MaxPlayers = maxPlayers;
            this.Metadata = metadata;
            this.Owner = owner;
            this.PartyName = partyName;
            this.Players = players;
            this.SearchProperties = searchProperties;
            this.Settings = settings;
            this.Status = status;
            this.Type = type;
            this.UpdatedAt = updatedAt;
            this.Visibility = visibility;
        }

        /// <summary>
        /// Gets or Sets BannedPlayers
        /// </summary>
        [DataMember(Name = "banned_players", EmitDefaultValue = false)]
        public Dictionary<string, Object> BannedPlayers { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionString
        /// </summary>
        [DataMember(Name = "connection_string", EmitDefaultValue = false)]
        public string ConnectionString { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets MaxPlayers
        /// </summary>
        [DataMember(Name = "max_players", EmitDefaultValue = false)]
        public string MaxPlayers { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets PartyName
        /// </summary>
        [DataMember(Name = "party_name", EmitDefaultValue = false)]
        public string PartyName { get; set; }

        /// <summary>
        /// Gets or Sets Players
        /// </summary>
        [DataMember(Name = "players", EmitDefaultValue = false)]
        public Dictionary<string, Object> Players { get; set; }

        /// <summary>
        /// Gets or Sets SearchProperties
        /// </summary>
        [DataMember(Name = "search_properties", EmitDefaultValue = false)]
        public Object SearchProperties { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name = "settings", EmitDefaultValue = false)]
        public PartiesPartySettings Settings { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartiesParty {\n");
            sb.Append("  BannedPlayers: ").Append(BannedPlayers).Append("\n");
            sb.Append("  ConnectionString: ").Append(ConnectionString).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MaxPlayers: ").Append(MaxPlayers).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  PartyName: ").Append(PartyName).Append("\n");
            sb.Append("  Players: ").Append(Players).Append("\n");
            sb.Append("  SearchProperties: ").Append(SearchProperties).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartiesParty);
        }

        /// <summary>
        /// Returns true if PartiesParty instances are equal
        /// </summary>
        /// <param name="input">Instance of PartiesParty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartiesParty input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BannedPlayers == input.BannedPlayers ||
                    this.BannedPlayers != null &&
                    input.BannedPlayers != null &&
                    this.BannedPlayers.SequenceEqual(input.BannedPlayers)
                ) && 
                (
                    this.ConnectionString == input.ConnectionString ||
                    (this.ConnectionString != null &&
                    this.ConnectionString.Equals(input.ConnectionString))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MaxPlayers == input.MaxPlayers ||
                    (this.MaxPlayers != null &&
                    this.MaxPlayers.Equals(input.MaxPlayers))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.PartyName == input.PartyName ||
                    (this.PartyName != null &&
                    this.PartyName.Equals(input.PartyName))
                ) && 
                (
                    this.Players == input.Players ||
                    this.Players != null &&
                    input.Players != null &&
                    this.Players.SequenceEqual(input.Players)
                ) && 
                (
                    this.SearchProperties == input.SearchProperties ||
                    (this.SearchProperties != null &&
                    this.SearchProperties.Equals(input.SearchProperties))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    this.Visibility.Equals(input.Visibility)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BannedPlayers != null)
                {
                    hashCode = (hashCode * 59) + this.BannedPlayers.GetHashCode();
                }
                if (this.ConnectionString != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionString.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.MaxPlayers != null)
                {
                    hashCode = (hashCode * 59) + this.MaxPlayers.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                if (this.PartyName != null)
                {
                    hashCode = (hashCode * 59) + this.PartyName.GetHashCode();
                }
                if (this.Players != null)
                {
                    hashCode = (hashCode * 59) + this.Players.GetHashCode();
                }
                if (this.SearchProperties != null)
                {
                    hashCode = (hashCode * 59) + this.SearchProperties.GetHashCode();
                }
                if (this.Settings != null)
                {
                    hashCode = (hashCode * 59) + this.Settings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Visibility.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
