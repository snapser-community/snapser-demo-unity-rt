/*
 * cjdevents
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: cjdevents: v3 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// PartiesSearchPartiesRequest
    /// </summary>
    [DataContract(Name = "partiesSearchPartiesRequest")]
    public partial class PartiesSearchPartiesRequest : IEquatable<PartiesSearchPartiesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesSearchPartiesRequest" /> class.
        /// </summary>
        /// <param name="limit">Number of results returned. The maximum allowed is 50, defaults to 10 if not provided..</param>
        /// <param name="metadataFilters">Metadata filters.</param>
        /// <param name="name">Returns guilds that have the name matching this field.</param>
        /// <param name="offset">Number of results to skip from the start of the result set.</param>
        /// <param name="sort">sort.</param>
        public PartiesSearchPartiesRequest(long limit = default(long), List<PartiesMetadataFilter> metadataFilters = default(List<PartiesMetadataFilter>), string name = default(string), long offset = default(long), PartiesSortParams sort = default(PartiesSortParams))
        {
            this.Limit = limit;
            this.MetadataFilters = metadataFilters;
            this.Name = name;
            this.Offset = offset;
            this.Sort = sort;
        }

        /// <summary>
        /// Number of results returned. The maximum allowed is 50, defaults to 10 if not provided.
        /// </summary>
        /// <value>Number of results returned. The maximum allowed is 50, defaults to 10 if not provided.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public long Limit { get; set; }

        /// <summary>
        /// Metadata filters
        /// </summary>
        /// <value>Metadata filters</value>
        [DataMember(Name = "metadata_filters", EmitDefaultValue = false)]
        public List<PartiesMetadataFilter> MetadataFilters { get; set; }

        /// <summary>
        /// Returns guilds that have the name matching this field
        /// </summary>
        /// <value>Returns guilds that have the name matching this field</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Number of results to skip from the start of the result set
        /// </summary>
        /// <value>Number of results to skip from the start of the result set</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public long Offset { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public PartiesSortParams Sort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartiesSearchPartiesRequest {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  MetadataFilters: ").Append(MetadataFilters).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartiesSearchPartiesRequest);
        }

        /// <summary>
        /// Returns true if PartiesSearchPartiesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PartiesSearchPartiesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartiesSearchPartiesRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.MetadataFilters == input.MetadataFilters ||
                    this.MetadataFilters != null &&
                    input.MetadataFilters != null &&
                    this.MetadataFilters.SequenceEqual(input.MetadataFilters)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                if (this.MetadataFilters != null)
                {
                    hashCode = (hashCode * 59) + this.MetadataFilters.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                if (this.Sort != null)
                {
                    hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
