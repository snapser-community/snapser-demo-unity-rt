/*
 * cjdevents
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: cjdevents: v3 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// MatchmakingBackfill
    /// </summary>
    [DataContract(Name = "matchmakingBackfill")]
    public partial class MatchmakingBackfill : IEquatable<MatchmakingBackfill>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingBackfill" /> class.
        /// </summary>
        /// <param name="assignment">assignment.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="id">id.</param>
        /// <param name="matchId">matchId.</param>
        /// <param name="region">region.</param>
        /// <param name="searchFields">searchFields.</param>
        public MatchmakingBackfill(MatchmakingAssignment assignment = default(MatchmakingAssignment), string createdAt = default(string), string id = default(string), string matchId = default(string), string region = default(string), MatchmakingSearchFields searchFields = default(MatchmakingSearchFields))
        {
            this.Assignment = assignment;
            this.CreatedAt = createdAt;
            this.Id = id;
            this.MatchId = matchId;
            this.Region = region;
            this.SearchFields = searchFields;
        }

        /// <summary>
        /// Gets or Sets Assignment
        /// </summary>
        [DataMember(Name = "assignment", EmitDefaultValue = false)]
        public MatchmakingAssignment Assignment { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets MatchId
        /// </summary>
        [DataMember(Name = "match_id", EmitDefaultValue = false)]
        public string MatchId { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets SearchFields
        /// </summary>
        [DataMember(Name = "search_fields", EmitDefaultValue = false)]
        public MatchmakingSearchFields SearchFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchmakingBackfill {\n");
            sb.Append("  Assignment: ").Append(Assignment).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MatchId: ").Append(MatchId).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  SearchFields: ").Append(SearchFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchmakingBackfill);
        }

        /// <summary>
        /// Returns true if MatchmakingBackfill instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchmakingBackfill to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchmakingBackfill input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Assignment == input.Assignment ||
                    (this.Assignment != null &&
                    this.Assignment.Equals(input.Assignment))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MatchId == input.MatchId ||
                    (this.MatchId != null &&
                    this.MatchId.Equals(input.MatchId))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.SearchFields == input.SearchFields ||
                    (this.SearchFields != null &&
                    this.SearchFields.Equals(input.SearchFields))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Assignment != null)
                {
                    hashCode = (hashCode * 59) + this.Assignment.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.MatchId != null)
                {
                    hashCode = (hashCode * 59) + this.MatchId.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.SearchFields != null)
                {
                    hashCode = (hashCode * 59) + this.SearchFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
