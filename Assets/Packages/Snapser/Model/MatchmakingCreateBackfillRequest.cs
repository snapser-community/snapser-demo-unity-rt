/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// MatchmakingCreateBackfillRequest
    /// </summary>
    [DataContract(Name = "matchmakingCreateBackfillRequest")]
    public partial class MatchmakingCreateBackfillRequest : IEquatable<MatchmakingCreateBackfillRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingCreateBackfillRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MatchmakingCreateBackfillRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingCreateBackfillRequest" /> class.
        /// </summary>
        /// <param name="assignment">assignment (required).</param>
        /// <param name="matchId">The match ID to use for this backfill (required).</param>
        /// <param name="matchProfileId">The match profile ID to use for this backfill (required).</param>
        /// <param name="searchFields">searchFields.</param>
        public MatchmakingCreateBackfillRequest(MatchmakingAssignment assignment = default(MatchmakingAssignment), string matchId = default(string), string matchProfileId = default(string), MatchmakingSearchFields searchFields = default(MatchmakingSearchFields))
        {
            // to ensure "assignment" is required (not null)
            if (assignment == null)
            {
                throw new ArgumentNullException("assignment is a required property for MatchmakingCreateBackfillRequest and cannot be null");
            }
            this.Assignment = assignment;
            // to ensure "matchId" is required (not null)
            if (matchId == null)
            {
                throw new ArgumentNullException("matchId is a required property for MatchmakingCreateBackfillRequest and cannot be null");
            }
            this.MatchId = matchId;
            // to ensure "matchProfileId" is required (not null)
            if (matchProfileId == null)
            {
                throw new ArgumentNullException("matchProfileId is a required property for MatchmakingCreateBackfillRequest and cannot be null");
            }
            this.MatchProfileId = matchProfileId;
            this.SearchFields = searchFields;
        }

        /// <summary>
        /// Gets or Sets Assignment
        /// </summary>
        [DataMember(Name = "assignment", IsRequired = true, EmitDefaultValue = true)]
        public MatchmakingAssignment Assignment { get; set; }

        /// <summary>
        /// The match ID to use for this backfill
        /// </summary>
        /// <value>The match ID to use for this backfill</value>
        [DataMember(Name = "match_id", IsRequired = true, EmitDefaultValue = true)]
        public string MatchId { get; set; }

        /// <summary>
        /// The match profile ID to use for this backfill
        /// </summary>
        /// <value>The match profile ID to use for this backfill</value>
        [DataMember(Name = "match_profile_id", IsRequired = true, EmitDefaultValue = true)]
        public string MatchProfileId { get; set; }

        /// <summary>
        /// Gets or Sets SearchFields
        /// </summary>
        [DataMember(Name = "search_fields", EmitDefaultValue = false)]
        public MatchmakingSearchFields SearchFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchmakingCreateBackfillRequest {\n");
            sb.Append("  Assignment: ").Append(Assignment).Append("\n");
            sb.Append("  MatchId: ").Append(MatchId).Append("\n");
            sb.Append("  MatchProfileId: ").Append(MatchProfileId).Append("\n");
            sb.Append("  SearchFields: ").Append(SearchFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchmakingCreateBackfillRequest);
        }

        /// <summary>
        /// Returns true if MatchmakingCreateBackfillRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchmakingCreateBackfillRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchmakingCreateBackfillRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Assignment == input.Assignment ||
                    (this.Assignment != null &&
                    this.Assignment.Equals(input.Assignment))
                ) && 
                (
                    this.MatchId == input.MatchId ||
                    (this.MatchId != null &&
                    this.MatchId.Equals(input.MatchId))
                ) && 
                (
                    this.MatchProfileId == input.MatchProfileId ||
                    (this.MatchProfileId != null &&
                    this.MatchProfileId.Equals(input.MatchProfileId))
                ) && 
                (
                    this.SearchFields == input.SearchFields ||
                    (this.SearchFields != null &&
                    this.SearchFields.Equals(input.SearchFields))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Assignment != null)
                {
                    hashCode = (hashCode * 59) + this.Assignment.GetHashCode();
                }
                if (this.MatchId != null)
                {
                    hashCode = (hashCode * 59) + this.MatchId.GetHashCode();
                }
                if (this.MatchProfileId != null)
                {
                    hashCode = (hashCode * 59) + this.MatchProfileId.GetHashCode();
                }
                if (this.SearchFields != null)
                {
                    hashCode = (hashCode * 59) + this.SearchFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
