/*
 * cjdevents
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: cjdevents: v3 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// MatchmakingServiceCreateTicketBody
    /// </summary>
    [DataContract(Name = "MatchmakingServiceCreateTicketBody")]
    public partial class MatchmakingServiceCreateTicketBody : IEquatable<MatchmakingServiceCreateTicketBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingServiceCreateTicketBody" /> class.
        /// </summary>
        /// <param name="metadata">Metadata associated with the ticket.</param>
        /// <param name="searchFields">searchFields.</param>
        public MatchmakingServiceCreateTicketBody(Dictionary<string, string> metadata = default(Dictionary<string, string>), MatchmakingSearchFields searchFields = default(MatchmakingSearchFields))
        {
            this.Metadata = metadata;
            this.SearchFields = searchFields;
        }

        /// <summary>
        /// Metadata associated with the ticket
        /// </summary>
        /// <value>Metadata associated with the ticket</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets SearchFields
        /// </summary>
        [DataMember(Name = "search_fields", EmitDefaultValue = false)]
        public MatchmakingSearchFields SearchFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchmakingServiceCreateTicketBody {\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  SearchFields: ").Append(SearchFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchmakingServiceCreateTicketBody);
        }

        /// <summary>
        /// Returns true if MatchmakingServiceCreateTicketBody instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchmakingServiceCreateTicketBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchmakingServiceCreateTicketBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.SearchFields == input.SearchFields ||
                    (this.SearchFields != null &&
                    this.SearchFields.Equals(input.SearchFields))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.SearchFields != null)
                {
                    hashCode = (hashCode * 59) + this.SearchFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
