/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// PartiesListPartiesRequest
    /// </summary>
    [DataContract(Name = "partiesListPartiesRequest")]
    public partial class PartiesListPartiesRequest : IEquatable<PartiesListPartiesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesListPartiesRequest" /> class.
        /// </summary>
        /// <param name="limit">Number of results returned. The maximum allowed is 50, defaults to 10 if not provided..</param>
        /// <param name="offset">Number of results to skip from the start of the result set.</param>
        /// <param name="sort">Orders by party name. Valid values - asc, desc.</param>
        public PartiesListPartiesRequest(long limit = default(long), long offset = default(long), string sort = default(string))
        {
            this.Limit = limit;
            this.Offset = offset;
            this.Sort = sort;
        }

        /// <summary>
        /// Number of results returned. The maximum allowed is 50, defaults to 10 if not provided.
        /// </summary>
        /// <value>Number of results returned. The maximum allowed is 50, defaults to 10 if not provided.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public long Limit { get; set; }

        /// <summary>
        /// Number of results to skip from the start of the result set
        /// </summary>
        /// <value>Number of results to skip from the start of the result set</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public long Offset { get; set; }

        /// <summary>
        /// Orders by party name. Valid values - asc, desc
        /// </summary>
        /// <value>Orders by party name. Valid values - asc, desc</value>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public string Sort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartiesListPartiesRequest {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartiesListPartiesRequest);
        }

        /// <summary>
        /// Returns true if PartiesListPartiesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PartiesListPartiesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartiesListPartiesRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                if (this.Sort != null)
                {
                    hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
