/*
 * cjdevents
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: cjdevents: v3 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// PartiesMetadataFilter
    /// </summary>
    [DataContract(Name = "partiesMetadataFilter")]
    public partial class PartiesMetadataFilter : IEquatable<PartiesMetadataFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesMetadataFilter" /> class.
        /// </summary>
        /// <param name="key">Field inside metadata to be filtered on.</param>
        /// <param name="op">Operator for the comparison. Valid values - LIKE, &#x3D;, &lt;&gt;, &gt;, &lt;.</param>
        /// <param name="value">Value for comparison.</param>
        public PartiesMetadataFilter(string key = default(string), string op = default(string), Object value = default(Object))
        {
            this.Key = key;
            this.Op = op;
            this.Value = value;
        }

        /// <summary>
        /// Field inside metadata to be filtered on
        /// </summary>
        /// <value>Field inside metadata to be filtered on</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Operator for the comparison. Valid values - LIKE, &#x3D;, &lt;&gt;, &gt;, &lt;
        /// </summary>
        /// <value>Operator for the comparison. Valid values - LIKE, &#x3D;, &lt;&gt;, &gt;, &lt;</value>
        [DataMember(Name = "op", EmitDefaultValue = false)]
        public string Op { get; set; }

        /// <summary>
        /// Value for comparison
        /// </summary>
        /// <value>Value for comparison</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public Object Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartiesMetadataFilter {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Op: ").Append(Op).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartiesMetadataFilter);
        }

        /// <summary>
        /// Returns true if PartiesMetadataFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of PartiesMetadataFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartiesMetadataFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Op == input.Op ||
                    (this.Op != null &&
                    this.Op.Equals(input.Op))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Op != null)
                {
                    hashCode = (hashCode * 59) + this.Op.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
