/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// PublishByoEventRequest
    /// </summary>
    [DataContract(Name = "PublishByoEvent_request")]
    public partial class PublishByoEventRequest : IEquatable<PublishByoEventRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublishByoEventRequest" /> class.
        /// </summary>
        /// <param name="eventTypeId">An optional ID that can be used to identify the payload.</param>
        /// <param name="message">message.</param>
        /// <param name="payload">The event payload as a sequence of bytes.</param>
        /// <param name="recipients">User/player IDs that will receive the event if they are connected.</param>
        public PublishByoEventRequest(long eventTypeId = default(long), ProtobufAny message = default(ProtobufAny), byte[] payload = default(byte[]), List<string> recipients = default(List<string>))
        {
            this.EventTypeId = eventTypeId;
            this.Message = message;
            this.Payload = payload;
            this.Recipients = recipients;
        }

        /// <summary>
        /// An optional ID that can be used to identify the payload
        /// </summary>
        /// <value>An optional ID that can be used to identify the payload</value>
        [DataMember(Name = "event_type_id", EmitDefaultValue = false)]
        public long EventTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public ProtobufAny Message { get; set; }

        /// <summary>
        /// The event payload as a sequence of bytes
        /// </summary>
        /// <value>The event payload as a sequence of bytes</value>
        [DataMember(Name = "payload", EmitDefaultValue = false)]
        public byte[] Payload { get; set; }

        /// <summary>
        /// User/player IDs that will receive the event if they are connected
        /// </summary>
        /// <value>User/player IDs that will receive the event if they are connected</value>
        [DataMember(Name = "recipients", EmitDefaultValue = false)]
        public List<string> Recipients { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublishByoEventRequest {\n");
            sb.Append("  EventTypeId: ").Append(EventTypeId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublishByoEventRequest);
        }

        /// <summary>
        /// Returns true if PublishByoEventRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PublishByoEventRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublishByoEventRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventTypeId == input.EventTypeId ||
                    this.EventTypeId.Equals(input.EventTypeId)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    input.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EventTypeId.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Payload != null)
                {
                    hashCode = (hashCode * 59) + this.Payload.GetHashCode();
                }
                if (this.Recipients != null)
                {
                    hashCode = (hashCode * 59) + this.Recipients.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
