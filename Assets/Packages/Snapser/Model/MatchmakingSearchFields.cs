/*
 * cjdevents
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: cjdevents: v3 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// Search fields are the fields which can be used when specifying filters.
    /// </summary>
    [DataContract(Name = "matchmakingSearchFields")]
    public partial class MatchmakingSearchFields : IEquatable<MatchmakingSearchFields>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingSearchFields" /> class.
        /// </summary>
        /// <param name="doubleArgs">A map of double args and their values to be used by the matchmaker.</param>
        /// <param name="latencyArgs">A map of string args of the region and the users ping to each region.</param>
        /// <param name="stringArgs">A map of string args and their values to be used by the matchmaker.</param>
        /// <param name="tags">An array of string tags to be used by the matchmaker.</param>
        public MatchmakingSearchFields(Dictionary<string, double> doubleArgs = default(Dictionary<string, double>), Dictionary<string, double> latencyArgs = default(Dictionary<string, double>), Dictionary<string, string> stringArgs = default(Dictionary<string, string>), List<string> tags = default(List<string>))
        {
            this.DoubleArgs = doubleArgs;
            this.LatencyArgs = latencyArgs;
            this.StringArgs = stringArgs;
            this.Tags = tags;
        }

        /// <summary>
        /// A map of double args and their values to be used by the matchmaker
        /// </summary>
        /// <value>A map of double args and their values to be used by the matchmaker</value>
        [DataMember(Name = "double_args", EmitDefaultValue = false)]
        public Dictionary<string, double> DoubleArgs { get; set; }

        /// <summary>
        /// A map of string args of the region and the users ping to each region
        /// </summary>
        /// <value>A map of string args of the region and the users ping to each region</value>
        [DataMember(Name = "latency_args", EmitDefaultValue = false)]
        public Dictionary<string, double> LatencyArgs { get; set; }

        /// <summary>
        /// A map of string args and their values to be used by the matchmaker
        /// </summary>
        /// <value>A map of string args and their values to be used by the matchmaker</value>
        [DataMember(Name = "string_args", EmitDefaultValue = false)]
        public Dictionary<string, string> StringArgs { get; set; }

        /// <summary>
        /// An array of string tags to be used by the matchmaker
        /// </summary>
        /// <value>An array of string tags to be used by the matchmaker</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchmakingSearchFields {\n");
            sb.Append("  DoubleArgs: ").Append(DoubleArgs).Append("\n");
            sb.Append("  LatencyArgs: ").Append(LatencyArgs).Append("\n");
            sb.Append("  StringArgs: ").Append(StringArgs).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchmakingSearchFields);
        }

        /// <summary>
        /// Returns true if MatchmakingSearchFields instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchmakingSearchFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchmakingSearchFields input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DoubleArgs == input.DoubleArgs ||
                    this.DoubleArgs != null &&
                    input.DoubleArgs != null &&
                    this.DoubleArgs.SequenceEqual(input.DoubleArgs)
                ) && 
                (
                    this.LatencyArgs == input.LatencyArgs ||
                    this.LatencyArgs != null &&
                    input.LatencyArgs != null &&
                    this.LatencyArgs.SequenceEqual(input.LatencyArgs)
                ) && 
                (
                    this.StringArgs == input.StringArgs ||
                    this.StringArgs != null &&
                    input.StringArgs != null &&
                    this.StringArgs.SequenceEqual(input.StringArgs)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DoubleArgs != null)
                {
                    hashCode = (hashCode * 59) + this.DoubleArgs.GetHashCode();
                }
                if (this.LatencyArgs != null)
                {
                    hashCode = (hashCode * 59) + this.LatencyArgs.GetHashCode();
                }
                if (this.StringArgs != null)
                {
                    hashCode = (hashCode * 59) + this.StringArgs.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
