/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v2 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// UpsertSubDocumentRequest
    /// </summary>
    [DataContract(Name = "UpsertSubDocument_request")]
    public partial class UpsertSubDocumentRequest : IEquatable<UpsertSubDocumentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertSubDocumentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertSubDocumentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertSubDocumentRequest" /> class.
        /// </summary>
        /// <param name="updates">Fragments to be upserted (required).</param>
        public UpsertSubDocumentRequest(List<StorageJsonFragment> updates = default(List<StorageJsonFragment>))
        {
            // to ensure "updates" is required (not null)
            if (updates == null)
            {
                throw new ArgumentNullException("updates is a required property for UpsertSubDocumentRequest and cannot be null");
            }
            this.Updates = updates;
        }

        /// <summary>
        /// Fragments to be upserted
        /// </summary>
        /// <value>Fragments to be upserted</value>
        [DataMember(Name = "updates", IsRequired = true, EmitDefaultValue = true)]
        public List<StorageJsonFragment> Updates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpsertSubDocumentRequest {\n");
            sb.Append("  Updates: ").Append(Updates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertSubDocumentRequest);
        }

        /// <summary>
        /// Returns true if UpsertSubDocumentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertSubDocumentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertSubDocumentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Updates == input.Updates ||
                    this.Updates != null &&
                    input.Updates != null &&
                    this.Updates.SequenceEqual(input.Updates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Updates != null)
                {
                    hashCode = (hashCode * 59) + this.Updates.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
